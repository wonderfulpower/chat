from flask import Flask, request
from flask import Flask, request, jsonify
import maya
import pymysql
import pandas as pd
import numpy as np
from numba import jit  #2023y new, for speed up to cal
from datetime import datetime
from datetime import timedelta
import calendar
import datetime as dt #개월수만 뽑아내기 위한 함수.
import time
import concurrent.futures
import requests
import json
import threading
import datetime as dt
from dateutil import relativedelta
from flask import Flask, jsonify, request #LOTTO
import random#LOTTO
import threading, time #2023 for keep going
from numba import jit  #2023y new, for speed up to cal




#====================================start===========================
#==========================

#==========================
#==========================
#==========================



app = Flask(__name__)


@app.route('/')  # this is the home page route

@jit(nopython=True)  #2023y new, for speed up to cal

def hello_world():  # this is the home page function that generates the page code
    return "Welcome to virtualenvs/chatbot Wesonsabot world!"






#==========================
#==========================
#==========================

#==========================
#==========================


@app.route('/webhook', methods=['POST'])

def webhook():
    req = request.get_json(silent=True, force=True)
    fulfillmentText = ''


    query_result = req.get('queryResult')
    if query_result.get('action') == 'wife_no_share.number_test':  # 배우자 no
        num1 = int(query_result.get('parameters').get('number'))  #공동상속인원
        num2 = int(query_result.get('parameters').get('number1'))  #총상속금액
        all_money = format(num2, ",")  # 채팅창에 총상속금액 표시하는 용도
        share = str(round(100 / num1))  #본인 지분율 구하기
        share_money = format(round(1 / num1 * num2), ",")  #본인 지분금액 구하기
        share_rest = str(num1 - 1)  #나머지 인원 구하기
        share_gongdong = str(round((num1 - 1) / num1, 2) * 100)  # 나머지 합계 지분율
        share_gongdong_money = format(round(((num1 - 1) / num1) * num2), ",")  #나머지 합계 상속금액
        #share_money_gongdong =format(round(1/num1*num2)*(num1-1),",")  #나머지 공동상속자 지분금액 구하기, 구해진지분금액*나머지인원
        print('num1 = {0}'.format(num1))
        print('num2 = {0}'.format(num2))
        print('총상속금액 : ', all_money)
        print('본인지분율 : ', share)
        print('본인지분금액 : ', share_money)
        print('나머지인원 : ', share_rest)
        print('나머지 공동지분율합계 : ', share_gongdong)
        print('나머지 공동상속금액 합계 : ', share_gongdong_money)
        fulfillmentText = '\n 💰 1.총상속인원 및 금액 \n ==========================\n -총상속인원 : ' + str(num1) + '명 \n -총상속금액 : ' + all_money + '\n\n\n💰 2.귀하의 상속지분비율 및 상속금액 \n ==========================\n -상속지분비율 : ' + share + "%, \n -상속금액 : " + share_money + '원 \n\n\n💰 3.나머지 공동상속인원 상속지분비율 및 금액 \n ========================== \n -나머지 공동상속인원 : ' + share_rest + '명 \n\n -각자의 지분비율 : ' + share + '% \n -각자의 상속금액 : ' + share_money + '원 \n\n -공동상속 합계 지분비율 :' + share_gongdong + '% \n -공동상속 합계 상속금액 :' + share_gongdong_money + '원으로 계산 되었습니다. \n\n처음으로 돌아가고 싶다면 /start 클릭'



    query_result = req.get('queryResult')
    if query_result.get('action') == 'wife_no_share.number':  # 배우자 no
        num1 = int(query_result.get('parameters').get('number'))  #공동상속인원
        num2 = int(query_result.get('parameters').get('number1'))  #총상속금액
        all_money = format(num2, ",")  # 채팅창에 총상속금액 표시하는 용도
        share = str(round(100 / num1))  #본인 지분율 구하기
        share_money = format(round(1 / num1 * num2), ",")  #본인 지분금액 구하기
        share_rest = str(num1 - 1)  #나머지 인원 구하기
        share_gongdong = str(round((num1 - 1) / num1, 2) * 100)  # 나머지 합계 지분율
        share_gongdong_money = format(round(((num1 - 1) / num1) * num2), ",")  #나머지 합계 상속금액
        #share_money_gongdong =format(round(1/num1*num2)*(num1-1),",")  #나머지 공동상속자 지분금액 구하기, 구해진지분금액*나머지인원
        print('num1 = {0}'.format(num1))
        print('num2 = {0}'.format(num2))
        print('총상속금액 : ', all_money)
        print('본인지분율 : ', share)
        print('본인지분금액 : ', share_money)
        print('나머지인원 : ', share_rest)
        print('나머지 공동지분율합계 : ', share_gongdong)
        print('나머지 공동상속금액 합계 : ', share_gongdong_money)
        fulfillmentText = '\n 💰 1.총상속인원 및 금액 \n ==========================\n -총상속인원 : ' + str(num1) + '명 \n -총상속금액 : ' + all_money + '\n\n\n💰 2.귀하의 상속지분비율 및 상속금액 \n ==========================\n -상속지분비율 : ' + share + "%, \n -상속금액 : " + share_money + '원 \n\n\n💰 3.나머지 공동상속인원 상속지분비율 및 금액 \n ========================== \n -나머지 공동상속인원 : ' + share_rest + '명 \n\n -각자의 지분비율 : ' + share + '% \n -각자의 상속금액 : ' + share_money + '원 \n\n -공동상속인 합계 지분비율 :' + share_gongdong + '% \n -공동상속인 합계 상속금액 :' + share_gongdong_money + '원으로 계산 되었습니다. \n\n처음으로 돌아가고 싶다면 /start 클릭'



    elif query_result.get('action') == 'wife_share.number':  # 배우자 yes
        num1 = int(query_result.get('parameters').get('number'))  #공동상속인원
        num2 = int(query_result.get('parameters').get('number1'))  #총상속금액
        all_money = format(num2, ",")  # 채팅창에 총상속금액 표시하는 용도
        share = str(round(100 / (num1 + 1.5)))  #본인 지분율 구하기
        share_partner = str(round(150 / (num1 + 1.5)))  #배우자 지분율 구하기
        share_money = format(round(1 / (num1 + 1.5) * num2), ",")  #본인 지분금액 구하기
        share_money_partner = format(round(1.5 / (num1 + 1.5) * num2), ",")  #배우자 지분금액 구하기
        share_rest = str(num1 - 1)  #나머지 인원 구하기, 배우자는 원래 제외되어 있었으므로 포함 필요 없음.
        share_gongdong = str(round((num1 - 1) / (num1 + 1.5), 2) * 100)  # 나머지 합계지분율, 배우자 제외
        share_gongdong_money = format(round(((num1 - 1) / (num1 + 1.5)) * num2), ",")  #나머지 합계 상속금액
        print('num1 = {0}'.format(num1))
        print('num2 = {0}'.format(num2))
        print('총상속금액 : ', all_money)
        print('본인지분율 : ', share)
        print('본인지분금액 : ', share_money)
        print('배우자지분율 : ', share_partner)
        print('배우자지분금액 : ', share_money_partner)
        print('나머지공동지분율합계 : ', share_gongdong)
        print('나머지 공동상속금액 합계 : ', share_gongdong_money)
        fulfillmentText = '\n 💰 1.총상속인원 및 금액 \n  ========================== \n -총상속인원 : ' + str(num1 + 1) + '명 \n -총상속금액 : ' + all_money + '\n\n\n💰 2.귀하의 상속지분비율 및 상속금액 \n ==========================\n -상속지분 : ' + share + "%, \n -상속금액 : " + share_money + '원 \n\n\n💰 3.망인 배우자의 상속지분비율 및 상속금액 \n  ========================== \n-망인 배우자의 지분비율 : ' + share_partner + '%, \n -상속지분금액 : ' + share_money_partner + '원  \n\n\n💰 4. 나머지 공동상속인원 상속 지분비율 및 금액 \n  ========================== \n-나머지 공동상속인원 : ' + share_rest + '명 \n\n -각자의 지분비율 : ' + share + '% \n -각자의 상속금액 : ' + share_money + '원 \n\n -공동상속인 합계 지분비율 :' + share_gongdong + '% \n -공동상속인 합계 상속금액 : ' + share_gongdong_money + '원 으로 계산되었습니다.\n\n처음으로 돌아가고 싶다면 /start 클릭'




    elif query_result.get('action') == 'daeseub_couple1_couple2.number':  # 대습 배우자, 피상속인 배우자 yes
        num1 = int(query_result.get('parameters').get('number'))  # 귀하 배우자와 동순위자
        num2 = int(query_result.get('parameters').get('number1'))  # 귀하의 자녀
        num3 = int(query_result.get('parameters').get('number2'))  # 총 상속금액
        all_money = format(num3, ",")
        share_partner = str(round(100 / (num1 + 1.5)))  #대습자 지분율 구하기,
        share_money = format(round(1 / (num1 + 1.5) * num3),",")  #상속전사망한 망인 지분금액 구하기
        share_mine = str(round(150 / (num2 + 1.5)))  #대습상속을 위한 배우자 본인 지분율 구하기
        share_my_money = format(round(1.5 / (num2 + 1.5) * (1 / (num1 + 1.5) * num3)),",")

        share_child = round(100 * num2 / (num2 + 1.5))  #자녀 총지분율,
        share_child_money = round(1 * num2 / (num2 + 1.5) * (1 / (num1 + 1.5) * num3))
        share_child_money_p = format(share_child_money,',')

        #자녀 각자지분비율
        if num2==1:
          share_child_1 = share_child
        elif num2 ==0:
          share_child_1 = 0
        else:
          share_child_1 = share_child / num2
        print('share_child_1',share_child_1)

        #자녀 각자지분금액
        if num2==1:
          share_child_money_1 = share_child_money
        elif num2 ==0:
          share_child_money_1 = 0
        else:
          share_child_money_1 = share_child_money / num2
        share_child_money_1 = format(share_child_money_1,',')
        print('share_child_money_1',share_child_money_1)

        print('num1 = {0}'.format(num1))
        print('num2 = {0}'.format(num2))
        print('num3 = {0}'.format(num3))
        print('총상속금액 : ', all_money)
        print('피대습인지분율 : ', share_partner)
        print('피대습인상속금액 : ', share_money)
        print('대습배우자본인 지분율 : ', share_mine)
        print('대습배우자본인 상속금액 : ', share_my_money)
        print('대습자녀 지분율 : ', share_child)
        print('대습자녀 상속금액 : ', share_child_money)
        print('대습자녀 각자 지분율 : ', share_child_1)
        print('대습자녀 각자 상속금액 : ', share_child_money_1)

        fulfillmentText = '\n 💰 1.피대습인(귀하의 배우자) 상속지분비율 및 상속금액 \n ========================== \n -상속대상금액 : ' + all_money + ' \n -피대습인 상속지분비율 : ' + share_partner + "% \n -피대습인 상속금액 : " + share_money + '원 \n\n ※이제 계산된 귀하 배우자의 상속금액' + share_money + '원을 기초로 하여 귀하 및 자녀의 대습상속지분비율을 구합니다. \n\n\n 💰 2.귀하의 대습지분비율 및 대습상속금액 \n ========================== \n -대습상속 지분비율 : ' + share_mine + '%  \n -대습상속금액 : ' + share_my_money + '원 \n\n\n💰 3.귀하의 자녀 대습지분비율 및 대습상속금액 \n ========================== \n -자녀인원 : ' + str(num2) + '명  \n\n -자녀의 각자 지분율 : ' + str(share_child_1) + '% \n -자녀의 각자 대습상속금액 : ' + str(share_child_money_1) + '원 \n\n -자녀의 대습지분비율 합계 : ' + str(share_child) + '%  \n -자녀의 대습상속금액 합계 : ' + str(share_child_money_p) + '원 으로 계산 되었습니다.\n\n처음으로 돌아가고 싶다면 /start 클릭.'




    elif query_result.get('action') == 'daeseub_couple1_no_couple2.number':  # 대습 배우자, 피상속인 배우자 no
        num1 = int(query_result.get('parameters').get('number'))  # 귀하 배우자와 동순위자
        num2 = int(query_result.get('parameters').get('number1'))  # 귀하의 자녀
        num3 = int(query_result.get('parameters').get('number2'))  # 총 상속금액
        share_partner = str(round(100 /(num1)))  #대습자 지분율 구하기, 피상속인 배우자 미포함. fulfillmentText에서는 사용 안함.
        all_money = format(num3, ",")
        share_money = format(round(1 / (num1) * num3),",")  #상속전사망한 망인 지분금액 구하기
        #share_rest = str(num1-1) #나머지 인원 구하기
        share_mine = str(round(150 / (num2 + 1.5)))  #대습상속을 위한 배우자 본인 지분율 구하기
        share_my_money = format(round(1.5 / (num2 + 1.5) * (1 / (num1) * num3)),",")
        share_child = round(100 * num2 / (num2 + 1.5))  #채팅출력위한 자녀 지분율 구하기,
        share_child_money = round(1 * num2 / (num2 + 1.5) * (1 / (num1) * num3))
        share_child_money_p = format(share_child_money,',')

        #자녀 각자지분비율
        if num2==1:
          share_child_1 = share_child
        elif num2 ==0:
          share_child_1 = 0
        else:
          share_child_1 = share_child / num2
        print('share_child_1',share_child_1)

        #자녀 각자지분금액
        if num2==1:
          share_child_money_1 = share_child_money
        elif num2 ==0:
          share_child_money_1 = 0
        else:
          share_child_money_1 = share_child_money / num2
        share_child_money_1 = format(share_child_money_1,',')
        print('share_child_money_1',share_child_money_1)

        print('num1 = {0}'.format(num1))
        print('num2 = {0}'.format(num2))
        print('num3 = {0}'.format(num3))
        print('총상속금액 : ', all_money)
        print('피대습인지분율 : ', share_partner)
        print('피대습인상속금액 : ', share_money)
        print('대습배우자본인 지분율 : ', share_mine)
        print('대습배우자본인 상속금액 : ', share_my_money)
        print('대습자녀 각자 지분율 : ', share_child_1)
        print('대습자녀 각자 상속금액 : ', share_child_money_1)
        print('대습자녀 지분율 : ', share_child)
        print('대습자녀 상속금액 : ', share_child_money)

        fulfillmentText = '\n 💰 1.피대습인(귀하의 배우자) 상속지분비율 및 상속금액 \n ========================== \n -상속대상금액 : ' + all_money + ' \n -피대습인 상속지분비율 : ' + share_partner + "% \n -피대습인 상속금액 : " + share_money + '원 \n\n ※이제 계산된 귀하 배우자의 상속금액' + share_money + '원을 기초로 하여 귀하 및 자녀의 대습상속지분비율을 구합니다. \n\n\n 💰 2.귀하의 대습지분비율 및 대습상속금액 \n ========================== \n -대습상속 지분비율 : ' + share_mine + '%  \n -대습상속금액 : ' + share_my_money + '원 \n\n\n💰 3.귀하의 자녀 대습지분비율 및 대습상속금액 \n ========================== \n -자녀인원 : ' + str(num2) + '명  \n\n -자녀의 각자 지분율 : ' + str(share_child_1) + '% \n -자녀의 각자 대습상속금액 : ' + str(share_child_money_1) + '원 \n\n -자녀의 대습지분비율 합계 : ' + str(share_child) + '%  \n -자녀의 대습상속금액 합계 : ' + str(share_child_money_p) + '원 으로 계산 되었습니다.\n\n처음으로 돌아가고 싶다면 /start 클릭.'



    elif query_result.get('action') == 'daeseub_couple1_sun.number':  # 대습 자녀, 피상속인 배우자 yes
        num1 = int(query_result.get('parameters').get('number'))  # 귀하 부모님과 동순위자
        num2 = int(query_result.get('parameters').get('number1'))  # 귀하의 살아계신 부모님
        num3 = int(query_result.get('parameters').get('number2'))  # 귀하와 동순위자 형제자매
        num4 = int(query_result.get('parameters').get('number3'))  # 총 상속금액
        all_money = format(num4, ",")
        share_myparent = str(round(100 / (num1 + 1.5)))  #대습자 지분율 구하기, 피상속인 배우자 포함하여야 함(배우자yes이므로). fulfillmentText에서는 사용 안함.
        share_money = format(round(1 / (num1 + 1.5) * num4), ",")  #상속전사망한 망인 지분금액 구하기
        share_rest = str(num3 - 1)  #나머지 인원 구하기
        share_mine = str(round(100 / (num3 + (num2 * 1.5))))  #대습상속을 위한 자녀 본인 지분율 구하기
        share_bro = str(round((num3 - 1) * 100 / (num3 + (num2 * 1.5))))  #채팅출력위한 동순위 지분율 구하기, 100-num3는 형제자매가 질문자포함 1명일경우 나머지는 0명이므로 0을 적용하기 위함.
        share_parent = str(round((150 * num2) / (num3 + (num2 * 1.5))))  #채팅출력위한 부모 지분율 구하기
        share_my_money = format(round(1 / (num3 + (num2 * 1.5)) * (1 / (num1 + 1.5) * num4)), ",")  #대습상속지분율 * 대습상속금액, num2에 1.5곱하는 이유는 num2의 값이 1이면 부모 1.5적용. 0이면 미적용위함.
        share_bro_money = format(round((num3 - 1) * (1 / (num3 +(num2 * 1.5)) * (1 / (num1 + 1.5) * num4))),",")  #1-num3를 하는 이유는 질문자 포함 형제자매가 1명일경우 나머지는 0명이므로 0을 적용하기 위함.
        share_parent_money = format(round((1.5 * num2) / (num3 +(num2 * 1.5)) * (1 / (num1 + 1.5) * num4)),",")  #대습상속지분율 * 대습상속금액, 부모 지분금액 채팅창 출력용도.
        print('num1 = {0}'.format(num1))
        print('num2 = {0}'.format(num2))
        print('num3 = {0}'.format(num3))
        print('num3 = {0}'.format(num4))
        print('총상속금액 : ', all_money)
        print('피대습인지분율 : ', share_myparent)
        print('피대습인상속금액 : ', share_money)
        print('대습 자녀본인 지분율 : ', share_mine)
        print('대습 자녀본인 상속금액 : ', share_my_money)
        print('대습 자녀의 형제 지분율 : ', share_bro)
        print('대습 자녀의 형제 상속금액 : ', share_bro_money)
        print('대습 부모 지분율 : ', share_parent)
        print('대습 부모 상속금액 : ', share_parent_money)
        fulfillmentText = '\n 💰 1.피대습인 상속지분비율 및 상속금액  \n ========================== \n -상속대상금액 : ' + all_money + '\n -피대습인의 상속지분비율 : ' + share_myparent + "% \n -피대습인의 상속금액 : " + share_money + '원  \n\n ※이제 계산된 피대습인(귀하의 돌아가신 부모님)의 상속금액' + share_money + '원을 기초로 하여 귀하 및 자녀의 대습상속지분비율을 구합니다. \n\n\n💰 2.귀하의 대습지분비율 및 대습상속금액   \n ==========================\n -귀하의 지분비율 : ' + share_mine + '%  \n -귀하의 상속금액 : ' + share_my_money + '원 \n\n💰 3. 귀하의 생존 부모님 대습지분비율 및 대습상속금액   \n ==========================\n -귀하의 생존 부모님 : ' + str(num2) + '명 \n -귀하의 생존 부모님 지분비율 :' + share_parent + '%  \n -귀하의 생존부모님 대습상속금액 : ' + share_parent_money + '원 \n\n💰 4. 동순위 상속인 대습지분 및 대습상속금액(귀하 부모님 제외)  \n ==========================\n -동순위 대습상속인 : ' + share_rest + '명 \n\n -각자의 지분비율 : ' + share_mine + '% \n -각자의 상속금액 : ' + share_my_money + '원 \n\n -동순위 대습상속인 지분비율합계 : ' + share_bro + '% \n -동순위 대습상속인 상속금액 합계 : ' + share_bro_money + '원으로 계산되었습니다. \n\n ※피대습인은 상속이 개시되기 전 사망하신 귀하의 부모님을 의미합니다.\n\n처음으로 돌아가고 싶다면 /start 클릭'



    elif query_result.get('action') == 'daeseub_couple1_no_sun.number':  # 대습 자녀, 피상속인 배우자 no
        num1 = int(query_result.get('parameters').get('number'))  # 귀하 부모님과 동순위자
        num2 = int( query_result.get('parameters').get('number1'))  # 귀하의 살아계신 부모님
        num3 = int(query_result.get('parameters').get('number2'))  # 귀하와 동순위자 형제자매
        num4 = int(query_result.get('parameters').get('number3'))  # 총 상속금액
        all_money = format(num4, ",")
        share_myparent = str(round(100 /(num1)))  #대습자 지분율 구하기, 피상속인 배우자 안계심. fulfillmentText에서는 사용 안함.
        share_money = format(round(1 / num1 * num4), ",")  #상속전사망한 망인 지분금액 구하기
        share_rest = str(num3 - 1)  #나머지 인원 구하기
        share_mine = str(round(100 / (num3 + (num2 * 1.5))))  #대습상속을 위한 자녀 본인 지분율 구하기
        share_bro = str(round((num3 - 1) * 100 / (num3 + (num2 * 1.5))))  #채팅출력위한 동순위 지분율 구하기
        share_parent = str(round((150 * num2) / (num3 + (num2 * 1.5))))  #채팅출력위한 부모 지분율 구하기
        share_my_money = format(round(1 / (num3 + (num2 * 1.5)) * (1 / num1 * num4)), ",")  #대습상속지분율 * 대습상속금액, num2에 1.5곱하는 이유는 num2의 값이 1이면 부모 1.5적용. 0이면 미적용위함.
        share_bro_money = format(round((num3 - 1) * (1 / (num3 +(num2 * 1.5)) * (1 / (num1 + 1.5) * num4))),",")  #num3/num3는 대습자녀 총 인원에서 총인원 나누면 1이 됨. 그러면 각자의 지분금액 구해짐.
        share_parent_money = format( round((1.5 * num2) / (num3 + (num2 * 1.5)) * (1 / (num1) * num4)),",")  #대습상속지분율 * 대습상속금액, 부모 지분금액 채팅창 출력용도.
        print('num1 = {0}'.format(num1))
        print('num2 = {0}'.format(num2))
        print('num3 = {0}'.format(num3))
        print('num3 = {0}'.format(num4))
        print('총상속금액 : ', all_money)
        print('피대습인지분율 : ', share_myparent)
        print('피대습인상속금액 : ', share_money)
        print('대습 자녀본인 지분율 : ', share_mine)
        print('대습 자녀본인 상속금액 : ', share_my_money)
        print('대습 자녀의 형제 지분율 : ', share_bro)
        print('대습 자녀의 형제 상속금액 : ', share_bro_money)
        print('대습 부모 지분율 : ', share_parent)
        print('대습 부모 상속금액 : ', share_parent_money)
        fulfillmentText = '💰 1.피대습인 상속지분비율 및 상속금액  \n ==========================  \n -상속대상금액 : ' + all_money + ' \n -피대습인의 상속지분비율 : ' + share_myparent + "% \n -피대습인의 상속금액 : " + share_money + '원  \n\n ※이제 계산된 피대습인(귀하의 돌아가신 부모님)의 상속금액' + share_money + '원을 기초로 하여 귀하 및 자녀의 대습상속지분비율을 구합니다. \n\n\n💰 2.귀하의 대습지분비율 및 대습상속금액   \n ========================== \n -귀하의 지분비율 : ' + share_mine + '%  \n -귀하의 상속금액 : ' + share_my_money + '원 \n\n💰 3. 귀하의 생존 부모님 대습지분비율 및 대습상속금액   \n ========================== \n -귀하의 생존 부모님 : ' + str(num2) + '명 \n -귀하의 생존 부모님 지분비율 :' + share_parent + '%  \n -귀하의 생존부모님 대습상속금액 : ' + share_parent_money + '원 \n\n💰 4. 동순위 상속인 대습지분 및 대습상속금액(귀하 부모님 제외)  \n ========================== \n -동순위 대습상속인 : ' + share_rest + '명 \n -각자의 지분비율 : ' + share_mine + '% \n -각자의 상속금액 : ' + share_my_money + '원 \n -동순위 대습상속인 지분비율합계 : ' + share_bro + '% \n -동순위 대습상속인 상속금액 합계 : ' + share_bro_money + '원으로 계산되었습니다. \n\n ※피대습인은 상속이 개시되기 전 사망하신 귀하의 부모님을 의미합니다.\n\n처음으로 돌아가고 싶다면 /start 클릭.'




    #=============중복장해율계산, 기왕증 기여도 반영============================
    elif query_result.get('action') == 'overlap_1':  # 중복장해율 계산, 기왕증 포함
        num1 = int(query_result.get('parameters').get('number1'))  #장해율1
        num2 = int(query_result.get('parameters').get('number2'))  #기왕증
        num3 = int(query_result.get('parameters').get('number3'))  #장해율2
        num4 = int(query_result.get('parameters').get('number4'))  #기왕증
        num5 = int(query_result.get('parameters').get('number5'))  #장해율3
        num6 = int(query_result.get('parameters').get('number6'))  #기왕증
        num7 = int(query_result.get('parameters').get('number7'))  #장해율4
        num8 = int(query_result.get('parameters').get('number8'))  #기왕증
        num9 = int(query_result.get('parameters').get('number9'))  #장해율5
        num10 = int(query_result.get('parameters').get('number10'))  #기왕증

        num1 = num1 * 0.01 # 계산용. 100을 -> 0.01로 변환
        num2 = num2 * 0.01
        num3 = num3 * 0.01
        num4 = num4 * 0.01
        num5 = num5 * 0.01
        num6 = num6 * 0.01
        num7 = num7 * 0.01
        num8 = num8 * 0.01
        num9 = num9 * 0.01
        num10 = num10 * 0.01

        print('num1 = {0}'.format(num1))
        print('num2 = {0}'.format(num2))
        print('num3 = {0}'.format(num3))
        print('num4 = {0}'.format(num4))
        print('num5 = {0}'.format(num5))
        print('num6 = {0}'.format(num6))
        print('num7 = {0}'.format(num7))
        print('num8 = {0}'.format(num8))
        print('num9 = {0}'.format(num9))
        print('num10 = {0}'.format(num10))

        첫번째중복장해 = num1 * (1-num2)
        두번째중복장해 = (1-첫번째중복장해) * num3 * (1-num4) + 첫번째중복장해
        세번째중복장해 = (1-두번째중복장해) * num5 * (1-num6) + 두번째중복장해
        네번째중복장해 = (1-세번째중복장해) * num7 * (1-num8) + 세번째중복장해
        다섯번중복째장해 = (1-네번째중복장해) * num9 * (1-num10) + 네번째중복장해
        최종중복장해율 = (다섯번중복째장해)

        첫번째중복장해 = round(첫번째중복장해 * 100 ,2) # 0.01 -> 100으로 변환, 출력용
        두번째중복장해 = round(두번째중복장해 * 100 ,2)
        세번째중복장해 = round(세번째중복장해 * 100 ,2)
        네번째중복장해 =  round(네번째중복장해 * 100 ,2)
        다섯번중복째장해 =  round(다섯번중복째장해 * 100 ,2)
        최종중복장해율 =  round(최종중복장해율 * 100 ,2)

        print('첫번째장해 : ', 첫번째중복장해)
        print('두번째장해 : ', 두번째중복장해)
        print('세번째장해 : ', 세번째중복장해)
        print('네번째장해 : ', 네번째중복장해)
        print('다섯번째장해 : ', 다섯번중복째장해)
        print('최종중복장해율 : ', 최종중복장해율)
        fulfillmentText = '\n첫번째 장해율 :'+str(첫번째중복장해)+'% \n 두번째 장해율 :'+str(두번째중복장해)+'% \n세번째 장해율 :'+str(세번째중복장해)+'% \n 네번째 장해율 :'+str(네번째중복장해)+'% \n 다섯번째장해율 :'+str(다섯번중복째장해)+'% \n\n 귀하의 최종중복장해율은 '+str(최종중복장해율)+'% 입니다.'



    #=============중복장해율계산, 기왕증 없음============================
    elif query_result.get('action') == 'overlap_2':  # 중복장해율 계산, 기왕증 X
        num1 = int(query_result.get('parameters').get('number1'))  #장해율1
        num2 = int(query_result.get('parameters').get('number2'))
        num3 = int(query_result.get('parameters').get('number3'))
        num4 = int(query_result.get('parameters').get('number4'))
        num5 = int(query_result.get('parameters').get('number5'))
        # num6 = int(query_result.get('parameters').get('number6'))
        # num7 = int(query_result.get('parameters').get('number7'))
        # num8 = int(query_result.get('parameters').get('number8'))
        # num9 = int(query_result.get('parameters').get('number9'))
        # num10 = int(query_result.get('parameters').get('number10'))

        num1 = num1 * 0.01 # 계산용. 100을 -> 0.01로 변환
        num2 = num2 * 0.01
        num3 = num3 * 0.01
        num4 = num4 * 0.01
        num5 = num5 * 0.01
        # num6 = num6 * 0.01
        # num7 = num7 * 0.01
        # num8 = num8 * 0.01
        # num9 = num9 * 0.01
        # num10 = num10 * 0.01

        print('num1 = {0}'.format(num1))
        print('num2 = {0}'.format(num2))
        print('num3 = {0}'.format(num3))
        print('num4 = {0}'.format(num4))
        print('num5 = {0}'.format(num5))
        # print('num6 = {0}'.format(num6))
        # print('num7 = {0}'.format(num7))
        # print('num8 = {0}'.format(num8))
        # print('num9 = {0}'.format(num9))
        # print('num10 = {0}'.format(num10))

        첫번째중복장해 = num1 * (1-num2)
        두번째중복장해 = (1-첫번째중복장해) * num2 + 첫번째중복장해
        세번째중복장해 = (1-두번째중복장해) * num3 + 두번째중복장해
        네번째중복장해 = (1-세번째중복장해) * num4 + 세번째중복장해
        다섯번중복째장해 = (1-네번째중복장해) * num5 + 네번째중복장해
        최종중복장해율 = (다섯번중복째장해)

        첫번째중복장해 = round(첫번째중복장해 * 100 ,2) # 0.01 -> 100으로 변환, 출력용
        두번째중복장해 = round(두번째중복장해 * 100 ,2)
        세번째중복장해 = round(세번째중복장해 * 100 ,2)
        네번째중복장해 =  round(네번째중복장해 * 100 ,2)
        다섯번중복째장해 =  round(다섯번중복째장해 * 100 ,2)
        최종중복장해율 =  round(최종중복장해율 * 100 ,2)

        print('첫번째장해 : ', 첫번째중복장해)
        print('두번째장해 : ', 두번째중복장해)
        print('세번째장해 : ', 세번째중복장해)
        print('네번째장해 : ', 네번째중복장해)
        print('다섯번째장해 : ', 다섯번중복째장해)
        print('최종중복장해율 : ', 최종중복장해율)
        fulfillmentText = '\n첫번째 장해율 :'+str(첫번째중복장해)+'% \n 두번째 장해율 :'+str(두번째중복장해)+'% \n세번째 장해율 :'+str(세번째중복장해)+'% \n 네번째 장해율 :'+str(네번째중복장해)+'% \n 다섯번째장해율 :'+str(다섯번중복째장해)+'% \n\n 귀하의 최종중복장해율은 '+str(최종중복장해율)+'% 입니다.'



########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################

#==============교통사고 한시장해====================================

    elif query_result.get('action') == 'temporary':
        #get data
        date1 = query_result.get('parameters').get('date')  #사고일
        date2 = query_result.get('parameters').get('date1')  #생년월일
        numb1 = int(query_result.get('parameters').get('number1'))  #입원기간
        numb2 = int(query_result.get('parameters').get('number2'))  #내과실비율
        numb3 = int(query_result.get('parameters').get('number3'))  #장해율
        numb4 = int(query_result.get('parameters').get('number4'))  #장해기간
        numb5 = int(query_result.get('parameters').get('number5'))  #월소득
        numb6 = int(query_result.get('parameters').get('number6'))  #가해자 선지급
        numb7 = int(query_result.get('parameters').get('number7'))  #피해자 선지급

        print('date1 = {0}'.format(date1))
        print('date2 = {0}'.format(date2))
        print('num1 = {0}'.format(numb1))
        print('num2 = {0}'.format(numb2))
        print('num3 = {0}'.format(numb3))
        print('num4 = {0}'.format(numb4))
        print('num5 = {0}'.format(numb5))
        print('num6 = {0}'.format(numb6))
        print('num7 = {0}'.format(numb7))

        사고일 = date1
        생년월일 = date2
        내과실 = numb2 * 0.01
        장해율 = numb3 * 0.01
        장해기간 = numb4
        월소득 = numb5



        print('===============날짜 구하기====================')

        #생년월일, 날짜str에서 datetime로 변환.
        dt = maya.parse(date2).datetime()
        print(dt)
        print('dt타입:', type(dt))
        #날짜만 구하기
        birth = datetime.date(dt)
        print('생년월일 :', birth)


        #사고일, 날짜str에서 datetime로 변환. 사고일에서 날짜 더하기 위함.
        accident_date = maya.parse(date1).datetime()
        print('사고일 :', accident_date)
        #날짜만 구하기(시분초 제외)
        acc_date = datetime.date(accident_date)
        print('사고일 날짜만추출:', acc_date)


        #사고당시 만나이 구하기(사고일-생년월일),  사고시점의 나이
        age = (acc_date - birth) // timedelta(days=365)  #나이로 계산 int. 출력용
        age_month = (acc_date - birth) // timedelta(365 / 12)  #사고당시 나이에 해당하는 총 일수를 월로 변환. 700개월 등
        print('age_month :', age_month)  #700개월 등, int
        print('사고일-생년월일 :', acc_date - birth)  #2020-01-01
        print('사고당시 만 나이:', age)  # 15, int


        #한시장해종료일, 사고일에서 장해기간numb4(년도) 더하기.
        한시장해종료일 = accident_date + pd.DateOffset(years=numb4, days=-1)
        #날짜만 구하기(시분초 제외)
        한시장해종료일 = datetime.date(한시장해종료일)  #2020-01-01, datetime.date
        한시장해종료일_str = 한시장해종료일.strftime("%Y-%m-%d") #str로 변환
        print('한시장해종료일_str:', 한시장해종료일_str)  #2020-01-01

        #정년 종료일(60세 기준),
        sixty_date = datetime.date(birth + pd.DateOffset(years=60, days=-1))
        print('정년60세 종료일:', sixty_date)  #2020-01-01

        #정년 종료일(60세 기준) str
        sixty_date_str = sixty_date.strftime("%Y-%m-%d")
        print('sixty_date_str:', sixty_date_str)

        #가동 종료일(60세 기준),
        sixtyfive_date = datetime.date(birth + pd.DateOffset(years=65, days=-1))
        print('정년60세 종료일:', sixtyfive_date)  #2020-01-01

        #가동 종료일(60세 기준) str
        sixtyfive_date_str = sixtyfive_date.strftime("%Y-%m-%d")
        print('sixtyfive_date_str:', sixtyfive_date_str)

        print('===============퇴원일 구하기-호프만계수 시작====================')

        #이제 퇴원일 구하기!, 퇴원일은 사고일에서 numb1을 더한 값
        퇴원일 = datetime.date(acc_date + pd.DateOffset(days=numb1-1)) #numb1은 입원기간
        print('퇴원일:',퇴원일)
        print('퇴원일 타입:',type(퇴원일))
        # 퇴원일_str = 퇴원일.strftime("%Y-%m-%d") #퇴원일을 str로 변환
        # print('퇴원일_str',퇴원일_str)
        # print('퇴원일_str 타입:',type(퇴원일_str))

        print('==========오늘날짜 구하기 ==========')

        #오늘날짜 구하기.
        오늘 = datetime.now()
        #날짜만 구하기(시분초 제외)
        오늘 = datetime.date(오늘)  #2020-01-01, datetime.date
        오늘_str = 오늘.strftime("%Y-%m-%d") #str로 변환
        print('오늘_str:',오늘_str)
        print('오늘_str type:',type(오늘_str))
        print('오늘:', 오늘)
        print('오늘 타입:', type(오늘))

        # if acc_date > 오늘:
        #     오늘 = acc_date
        # else:
        #     오늘 = 오늘

        print('============!!!!입원기간반영위한 사고일조정!!!==============')
        #입원기간 호프만계수 버리기용도
        #도시일용은 다음달 계수로 반영. 그렇기 때문에 이걸 적용해야 함.
        #반대로 첫사고일 부터 한달채움 계산은 사고일을 기준!! 이거적용하면 안됨. 이것만 해결하면 될거 같은데 미치겠다 진짜 나좀 살려주라!!
        #입원기간에서 for월별입원기간조회하고 실제입원일수 계산할때만 한달채움을 사용.
        #입원만 반영해야 함.
        #최초 입원일이 1일이 아닌경우 입원계산에서 최초달을 버리기 위함.
        입원시작년 = int(acc_date.strftime('%Y'))  # 해당년도 뽑아내기
        입원시작월 = int(acc_date.strftime('%m'))  # 해당월 뽑아내기
        입원시작일 = int(acc_date.strftime('%d'))
        print('입원시작년,월,일',입원시작년,입원시작월,입원시작일)

        #사고일의다음달 구하기
        사고일다음달 = acc_date+ pd.DateOffset(months=1)
        print('사고일다음달:',사고일다음달)

        #사고일 다음달의 1일 구하기
        사고일다음달첫날 = datetime.date(사고일다음달.replace(day=1))
        print('date first:',사고일다음달첫날)
        print('date first:',type(사고일다음달첫날))

        if 입원시작일 ==1: #입원시작일이 1일이면 그대로, 2일부터면 버리기.
          ad_acc_date = acc_date
        else:
          ad_acc_date = 사고일다음달첫날
        print('ad_acc_date:',ad_acc_date)
        print('ad_acc_date:',type(ad_acc_date))

        #사고일의 다음달 날짜가 사고월의 총일수와 동일하게 되는 경우. 1달로 인식하도록.



        print('===============정년기간개월수 및 실제일수==============')
        #호프만계수
        단순정년기간조회 = pd.date_range(acc_date, sixty_date, freq='1m')  # 생일~가동기간까지 1달씩
        단순정년기간개월수 = len(단순정년기간조회)
        print('단순정년기간조회:', 단순정년기간조회)
        print('단순정년기간개월수:', 단순정년기간개월수)

        #정년기간 실제일수 구하기, 정확한 계산위해. 실제일수가 더 큰 경우는 없음.
        실제정년일수 = ((sixty_date - acc_date) // timedelta(days=1) + 1)
        print('실제정년_days:', 실제정년일수)  #1000 int , 오늘적용위해 수정.

        sum1 = 0
        monthList = []
        append = monthList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        정년기간개월수_for = 단순정년기간조회.strftime('%d')  #for문 적용 위함.
        for i in 정년기간개월수_for:
            sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
            append(i)
        for_조회정년일수 = sum1
        print('for_조회정년일수:', for_조회정년일수)

        실제정년일수와차이일수 = for_조회정년일수 - 실제정년일수
        print('실제정년일수와차이일수:', 실제정년일수와차이일수)  #0보다 크면 over된 수치.

        #아래 정년기간개월수()함수에 정년기간비교해서 정년마지막일보다도 더 크면 2개월을 공제해야함.
        #실제정년일수보다 for_조회정년일수가 0보다도 크면 무조건 1은 빼줘야 함.
        정년마지막년 = int(sixty_date.strftime('%Y'))  # 정년마지막기간 해당년도 뽑아내기
        정년마지막월 = int(sixty_date.strftime('%m'))  # 정년마지막기간 해당월 뽑아내기
        정년마지막월_말일 = calendar.monthrange(정년마지막년, 정년마지막월)[1]
        print('정년마지막월_말일:', 정년마지막월_말일)


        #단순개월수조회가 2개월 이상 over되는 경우때문에 이 함수 사용.
        def 정년기간개월수():
            if 실제정년일수 < for_조회정년일수 and 실제정년일수와차이일수 > 정년마지막월_말일:
                return 단순정년기간개월수 - 2  #
            elif 실제정년일수 < for_조회정년일수 and 실제정년일수와차이일수 <= 정년마지막월_말일:
                return 단순정년기간개월수 - 1  #여기를 수정. 끼리낄 마이너스해서 남은일수 나누기 30.4166으로 나눈값을 마이너스.
            else:
                return 단순정년기간개월수
        print('정년기간개월수():', 정년기간개월수())

        print('===============가동기간개월수 및 실제일수==============')
        #호프만계수
        단순가동기간조회 = pd.date_range(acc_date, sixtyfive_date, freq='1m')  # 생일~가동기간까지 1달씩
        단순가동기간개월수 = len(단순가동기간조회)
        print('단순가동기간조회:', 단순가동기간조회)
        print('단순가동기간개월수:', 단순가동기간개월수)

        #가동기간 실제일수 구하기, 정확한 계산위해. 실제일수가 더 큰 경우는 없음.
        실제가동일수 = ((sixtyfive_date - acc_date) // timedelta(days=1) + 1)
        print('실제가동_days:', 실제가동일수)  #1000 int , 오늘적용위해 수정.

        sum1 = 0
        monthList = []
        append = monthList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        가동기간개월수_for = 단순가동기간조회.strftime('%d')  #for문 적용 위함.
        for i in 가동기간개월수_for:
            sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
            append(i)
        for_조회가동일수 = sum1
        print('for_조회정년일수:', for_조회가동일수)

        실제가동일수와차이일수 = for_조회가동일수 - 실제가동일수
        print('실제가동일수와차이일수:', 실제가동일수와차이일수)  #0보다 크면 over된 수치.

        #아래 가동기간개월수()함수에 가동기간비교해서 가동마지막일보다도 더 크면 2개월을 공제해야함.
        #실제가동일수보다 for_조회가동일수가 0보다도 크면 무조건 1은 빼줘야 함.
        가동마지막년 = int(sixtyfive_date.strftime('%Y'))  # 가동마지막기간 해당년도 뽑아내기
        가동마지막월 = int(sixtyfive_date.strftime('%m'))  # 정년마지막기간 해당월 뽑아내기
        가동마지막월_말일 = calendar.monthrange(가동마지막년, 가동마지막월)[1]
        print('가동마지막월_말일:', 가동마지막월_말일)


        def 가동기간개월수():
            if 실제가동일수 < for_조회가동일수 and 실제가동일수와차이일수 > 가동마지막월_말일:
                return 단순가동기간개월수 - 2  #
            elif 실제가동일수 < for_조회가동일수 and 실제가동일수와차이일수 <= 가동마지막월_말일:
                return 단순가동기간개월수 - 1
            else:
                return 단순가동기간개월수


        print('가동기간개월수():', 가동기간개월수())



        print('===============대표적호프만계수====================')


        #한시장해기간 호프만, hoffman sql data 불러오기
        #sql nwehof.db 접속, 호프만계수
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속  #sql db 접속
        db = conn.cursor()
        setdata = (numb4 * 12, )  #변수로 검색위해
        query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
        data = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
        data = float(data[0])  # 튜플을 float으로 변환
        한시장해호프만 = data
        print('한시장해기간 호프만 타입:', type(한시장해호프만))
        print('한시장해기간 호프만:', 한시장해호프만)

        #정년(60세) 호프만, hoffman sql data 불러오기
        db = conn.cursor()
        setdata = (max(0,정년기간개월수()), )  #변수로 검색위해
        query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
        data4 = db.fetchone()
        data4 = (data4[0])  # 튜플을 float으로 변환
        정년호프만 = data4
        print('정년 호프만 타입:', type(data4))
        print('정년기간 호프만:', data4)

        #가동기간(65세) 호프만, hoffman sql data 불러오기
        db = conn.cursor()
        setdata = (max(0,가동기간개월수()), )  #변수로 검색위해
        query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
        data5 = db.fetchone()
        data5 = (data5[0])  # 튜플을 float으로 변환
        가동호프만 = data5
        print('가동기간 타입:', type(data5))
        print('가동기간 호프만:', data5)



        print('===============================입원기간===============================')
        print('==========================1.월별 말일 조회!!!!!=======================')

        #월별기간조회해서 총합구하고 나눠서 개월수 구하는 매우 중요한 용도!!!!!진심 중요

        퇴원일65세비교후 = min(퇴원일, sixtyfive_date)  # 여기서 퇴원일은 65세와 비교해서 적용해야 함.

        #사고일로부터 한달 두달 달수 계산위함.
        단순입원기간조회 = pd.date_range(acc_date, 퇴원일65세비교후, freq='M')
        단순입원기간개월수 = len(단순입원기간조회)
        print('단순입원기간조회:', 단순입원기간조회)
        print('단순입원기간개월수:', 단순입원기간개월수)


        series_월별기간조회 = pd.Series(range(len(단순입원기간조회)), index=단순입원기간조회)  #도시일용조회
        print('series_월별기간조회', series_월별기간조회)

        #실제 일수 구하기, 실제사고일
        admission_days = max(0, ((퇴원일65세비교후 - acc_date) // timedelta(days=1))+1)
        print('admission_days:', admission_days)  #1000 int , 오늘적용위해 수정.


        sum1 = 0
        monthList = []
        append = monthList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        입원기간개월수_for = 단순입원기간조회.strftime('%d')  #for문 적용 위함.
        for i in 입원기간개월수_for:
            sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
            append(i)
        for_월별입원기간조회 = sum1
        print('for_월별입원기간조회:', sum1)
        print('monthList', monthList)


        실제입원일수와차이일수 = for_월별입원기간조회 - admission_days
        print('실제입원일수와차이일수:', 실제입원일수와차이일수)  #0보다 크면 over된 수치.

        fullmonth_days = for_월별입원기간조회 - 실제입원일수와차이일수
        print('fullmonth_days',fullmonth_days)

        def 입원기간개월수():
            if admission_days < for_월별입원기간조회 and fullmonth_days > admission_days:
                return 단순입원기간개월수 - 2  #
            elif admission_days < for_월별입원기간조회 and fullmonth_days <= admission_days:
                return 단순입원기간개월수 - 1
            else:
                return 단순입원기간개월수


        print('입원기간개월수():', 입원기간개월수())

        print('============2.총입원호프만계수 구하기==============')

        #입원 총 호프만계수 구하기
        setdata = (입원기간개월수(), )  #오늘적용위해 수정
        print('setdata:', setdata)
        query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
        hoffman_data = db.fetchone()
        hoffman_data = float(hoffman_data[0])  # 튜플을 float으로 변환
        총입원호프만 = min(240, hoffman_data)
        print('총입원기간 호프만:', hoffman_data)  #0.995850622





        print('=========3. 오늘까지 진정한 최대 개월수 구하기======')

        단순입원기간조회_오늘까지 = pd.date_range(acc_date, min(오늘, 퇴원일65세비교후), freq='1M')  #
        print('단순입원기간조회:', 단순입원기간조회)

        단순입원기간개월수_오늘까지 = len(단순입원기간조회_오늘까지)
        print('단순입원기간개월수_오늘까지:', 단순입원기간개월수_오늘까지)

        #오늘까지 실제 일수 구하기
        admission_days = max(0, ((min(오늘, 퇴원일65세비교후) - acc_date) // timedelta(days=1))+1)
        print('admission_days:', admission_days)  #1000 int , 오늘적용위해 수정.

        sum1 = 0
        monthList = []
        append = monthList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        입원기간개월수_for_오늘까지 = 단순입원기간조회_오늘까지.strftime('%d')  #for문 적용 위함.
        for i in 입원기간개월수_for_오늘까지:
            sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
            append(i)
        for_월별입원기간조회_오늘까지 = sum1
        print('for_월별입원기간조회_오늘까지:', sum1)
        print('monthList', monthList)

        실제입원일수와차이일수_오늘까지 = for_월별입원기간조회_오늘까지 - admission_days
        print('실제입원일수와차이일수:', 실제입원일수와차이일수)  #0보다 크면 over된 수치.


        fullmonth_days = for_월별입원기간조회 - 실제입원일수와차이일수_오늘까지
        print('fullmonth_days:',fullmonth_days)

        #아래 가동기간개월수()함수에 가동기간비교해서 가동마지막일보다도 더 크면 2개월을 공제해야함.
        #실제가동일수보다 for_조회가동일수가 0보다도 크면 무조건 1은 빼줘야 함.
        입원마지막년_오늘까지 = int(퇴원일.strftime('%Y'))  # 가동마지막기간 해당년도 뽑아내기
        입원마지막월_오늘까지 = int(퇴원일.strftime('%m'))  # 정년마지막기간 해당월 뽑아내기
        입원마지막월_말일_오늘까지 = calendar.monthrange(입원마지막년_오늘까지, 입원마지막월_오늘까지)[1]
        print('입원마지막월_말일_오늘까지:', 입원마지막월_말일_오늘까지)

        #오늘까지 총 입원개월수 선정
        def 입원기간개월수_오늘까지():
            if admission_days < for_월별입원기간조회_오늘까지 and fullmonth_days > admission_days:
                return 단순입원기간개월수_오늘까지 - 2  #
            elif admission_days < for_월별입원기간조회_오늘까지 and fullmonth_days <= admission_days:
                return 단순입원기간개월수_오늘까지 - 1
            else:
                return 단순입원기간개월수_오늘까지


        print('입원기간개월수_오늘까지():', 입원기간개월수_오늘까지())


        print('================4.for문으로 오늘까지 호프만계수 구하기==================')
        #저 위에서 다 정리하고 여기에 개월수 넣기.

        hofList = []  #호프만 계수
        append = hofList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        db = conn.cursor()
        if 입원기간개월수_오늘까지() == 0:
            입원기간개월수_오늘까지() == 0
        else:
            for o in range(1, 입원기간개월수_오늘까지() + 1):
                setdata = (o, )  #변수로 검색위해
                query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
                hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
                hoffman = float(hoffman[0])  # 튜플을 float으로 변환
                append(hoffman)
            hoffman = min(hoffman, 240)
        print('hofList:', hofList)  #hoffman 계수 구해서 리스트에 담기

        hof_m_List = []  #공제위한 계수 조회
        append = hof_m_List.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        if 입원기간개월수_오늘까지() == 0:
            입원기간개월수_오늘까지() == 0
        else:
            for k in range(0, 입원기간개월수_오늘까지()):
                setdata = (k, )  #변수로 검색위해
                query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
                hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
                hoffman = float(hoffman[0])  # 튜플을 float으로 변환
                append(hoffman)
            hoffman = min(hoffman, 240)
        print('hof_m_List:', hof_m_List)  #hoffman 계수 구해서 리스트에 담기


        print('==========================5.도시일용=======================')

        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        #오늘기준 도시일용노임
        setdata = (오늘_str, )  #변수로 검색위해, 사고일.
        setdata = (setdata[0])  # 튜플을 str로 변환
        db = conn.cursor()
        query = db.execute("SELECT dosi_month from dosi where date=%s", [setdata])
        data3 = db.fetchone()
        dosi_today = (data3[0])  # 튜플을 변환
        dosi_today_p = format(dosi_today, ",")
        print('오늘기준도시일용노임:', dosi_today)  #int, 3042000

        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        #사고일기준 도시일용노임
        setdata = (acc_date, )  #변수로 검색위해, 사고일.
        setdata = (setdata[0])  # 튜플을 str로 변환
        db = conn.cursor()
        query = db.execute("SELECT dosi_month from dosi where date=%s", [setdata])
        data3 = db.fetchone()
        dosi_acc = (data3[0])  # 튜플을 변환
        dosi_acc_p = format(dosi_acc, ",")
        print('사고일기준도시일용노임:', dosi_acc)  #int, 3042000


        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        퇴원일65세비교후dosi = min(퇴원일+ pd.DateOffset(months=1), sixtyfive_date)
        print('퇴원일+ pd.DateOffset(days=입원시작일)',퇴원일+ pd.DateOffset(days=입원시작일))

        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        단순입원기간조회_dosi = pd.date_range(ad_acc_date, 퇴원일65세비교후dosi, freq='M')
        단순입원기간개월수_dosi = len(단순입원기간조회_dosi)
        print('단순입원기간조회_dosi:', 단순입원기간조회_dosi)
        print('단순입원기간개월수_dosi:', 단순입원기간개월수_dosi)

        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        series_월별기간조회_dosi = pd.Series(range(len(단순입원기간조회_dosi)), index=단순입원기간조회_dosi)  #도시일용조회
        print('series_월별기간조회_dosi', series_월별기간조회_dosi)


        incomeList = []
        append = incomeList.append
        for x in series_월별기간조회_dosi:
            입원기준 = (series_월별기간조회_dosi.index[x]).strftime('%Y-%m-%d')
            print('입원기준', 입원기준)
            ##오늘보다 입원기준 날짜가 크면 도시일용노임을 오늘기준으로
            setdata = (입원기준, )  #변수로 검색위해, 사고일.
            setdata = (setdata[0])  # 튜플을 str로 변환
            query = db.execute("SELECT dosi_month from dosi where date=%s", [setdata])

            if 입원기준 > 오늘_str:
                data = (dosi_today, )
            else:
                data = db.fetchone()

            dosi = (data[0])  # 튜플을 변환

            #입원기준이 60세 정년보다 크면 도시일용 적용.
            if 입원기준 > sixty_date_str:
                income = dosi
            elif 입원기준 > sixtyfive_date_str:
                income = 0
            else:
                income = max(dosi, 월소득)  #도시일용과 월소득 중 높은 금액

            append(income)  #도시일용노임 리스트에 담기
        print('incomeList:', incomeList)





        print('==========================6.List calc=======================')

        #호프만끼리 공제
        hoffman_calc=[]
        a1 = hofList
        a2 = hof_m_List

        for w in range(len(a1)):
          hoffman_calc.append(a1[w]-a2[w])
        print(hoffman_calc)
        hoffman_today합계 = sum(hoffman_calc) #오늘위해 수정
        print('hoffman_calc합계:',sum(hoffman_calc))


        #hoffman과 dosi 곱하기,
        ilsil_admission = []
        a1 = hoffman_calc
        a2 = incomeList
        for i in range(len(a1)):
            ilsil_admission.append(a1[i] * a2[i])
        print(ilsil_admission)

        print('===============7.사고일~오늘까지 입원합계===================')
        #ilsil 안의 값 모두 더하기. 그러면 일실수입 합계 구해짐
        입원기간일실수입_오늘까지=sum(ilsil_admission)
        print('입원기간일실수입_오늘까지:',입원기간일실수입_오늘까지)

        print('==================8.오늘이후~퇴원까지 입원합계===============')
        #총입원호프만이 0인경우 오류방지 위함.
        if 총입원호프만 == 0:
            income =0
        else:
            income = income
        print('income',income)

        #오늘이후 정년까지 호프만계수 산정, 정년이후 퇴원까지 호프만계수 산정
        #총입원호프만이 정년호프만보다 큰 경우 정년기간이후 가동기간까지는 도시일용.
        #총입원호프만이 정년호프만보다 작은 경우 예전 그대로.
        #장해쪽은 이미 모든게 적용되서 필요 없고, 입원의 경우 오늘날짜보다 정년이 긴 경우 정상적인 계산이 되지 않는 관계로 이 if함수를 적용하게됨.
        #한시장해호프만을 따로 적용하지는 않은상태. 한시 오류 가능성 있음.
        if 총입원호프만 <= 정년호프만:
          오늘이후Hoffman = 총입원호프만 - hoffman_today합계
          입원기간일실수입_오늘이후 = income * 오늘이후Hoffman
          print('오늘이후Hoffman:', 오늘이후Hoffman)
          print('입원기간일실수입_오늘이후:', 입원기간일실수입_오늘이후)

        elif 총입원호프만 > 정년호프만:
          오늘이후정년까지Hoffman = max(정년호프만,hoffman_today합계) - hoffman_today합계
          오늘정년이후가동까지Hoffman = max(0, min(가동호프만, 총입원호프만) -  max(정년호프만,hoffman_today합계))
          오늘이후Hoffman = 오늘이후정년까지Hoffman + 오늘정년이후가동까지Hoffman
          print('오늘이후정년까지Hoffman:', 오늘이후정년까지Hoffman)
          print('오늘정년이후가동까지Hoffman:', 오늘정년이후가동까지Hoffman)
          print('오늘이후Hoffman:', 오늘이후Hoffman)

          입원기간일실수입_오늘이후 = (월소득 * 오늘이후정년까지Hoffman) + (dosi_today * 오늘정년이후가동까지Hoffman)
          print('입원기간일실수입_오늘이후:', 입원기간일실수입_오늘이후)


        print('================9.입원기간일실수입 총합계====================')
        입원기간일실수입총합계 = 입원기간일실수입_오늘이후 + 입원기간일실수입_오늘까지
        print('입원기간일실수입총합계',입원기간일실수입총합계)
        print('입원기간 총호프만계수:', 오늘이후Hoffman + hoffman_today합계)





        print('==============================장해===============================')
        print('======================10.오늘까지 장해기간(max 정년)===================')

        #for old man, 10번 11번 이 함수 추가.
        #오늘보다 정년이 더 짧은 분들은 연세가 매우 많으신 분들 위한 함수. 굳이 정년적용할 필요 없이 그냥 가동기간과 사고일 비교위해 이 함수 적용.
        if 오늘 > sixty_date:
          sixty_date = sixtyfive_date
        else:
          sixty_date = sixty_date
        print('sixty_date',sixty_date)


        #여기서부터는 정상.

        월별기간조회_오늘까지 = pd.date_range(acc_date, min(sixty_date,min(한시장해종료일, 오늘)), freq='1M')
        print('월별기간조회_오늘까지:', 월별기간조회_오늘까지)

        series_월별기간조회_오늘까지 = pd.Series(range(len(월별기간조회_오늘까지)), index=월별기간조회_오늘까지)
        print('series_월별기간조회_오늘까지:', series_월별기간조회_오늘까지)


        sum1 = 0
        monthList = []
        append = monthList.append
        월별기간조회_오늘까지 = 월별기간조회_오늘까지.strftime('%d')
        print('월별기간조회_오늘까지:', 월별기간조회_오늘까지)
        for i in 월별기간조회_오늘까지:
            sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
            #print('월별기간조회_오늘까지 sum:',sum1)
            append(i)
        for_월별장해기간조회 = sum1
        월말기준개월수 = len(월별기간조회_오늘까지)  # 10, int, 이수치가 실질적으로 호프만계수에 적용되는 부분. 개월수
        print('월말기준개월수:', 월말기준개월수)

        print('monthList', monthList)


        print('========11.오늘까지 장해기간(max 정년) 진정한 최대 개월수 구하기=============')

        #for old man, 10번 11번 이 함수 추가.
        #오늘보다 정년이 더 짧은 분들은 연세가 매우 많으신 분들 위한 함수. 굳이 정년적용할 필요 없이 그냥 가동기간과 사고일 비교위해 이 함수 적용.
        if 오늘 > sixty_date:
          sixty_date = sixtyfive_date
        else:
          sixty_date = sixty_date
        print('sixty_date',sixty_date)


        #여기서부터는 정상.
        #실제 일수 구하기
        LCL_days = max(0, ((min(sixty_date, min(한시장해종료일, 오늘)) - acc_date) // timedelta(days=1)) + 1)
        print('LCL_days:', LCL_days)  #1000 int

        실제장해일수와차이일수 = for_월별장해기간조회 - LCL_days
        print('실제장해일수와차이일수:', 실제장해일수와차이일수)  #0보다 크면 over된


        fullmonth_days = for_월별장해기간조회 - 실제장해일수와차이일수
        print('fullmonth_days',fullmonth_days)


        def hof_month_max_LCL():
            if LCL_days < for_월별입원기간조회 and fullmonth_days > LCL_days:
                return 월말기준개월수 - 2  #
            elif LCL_days < for_월별입원기간조회 and fullmonth_days <= LCL_days:
                return 월말기준개월수 - 1
            else:
                return 월말기준개월수
        print('hof_month_max():', hof_month_max_LCL())


        print('==========================12.for문으로 호프만계수 구하기=======================')
        #저 위에서 다 정리하고 여기에 개월수 넣기.

        hofList_LCL=[] #호프만 계수
        append = hofList_LCL.append
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속  #sql db 접속
        db = conn.cursor()
        if hof_month_max_LCL() <= 0:
            hof_month_max_LCL() ==0
        else:
            for o in range(1,hof_month_max_LCL()+1):
              setdata = (o , )  #변수로 검색위해
              query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
              hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
              hoffman = float(hoffman[0])  # 튜플을 float으로 변환
              append(hoffman)#조회된 월별기간 30,29,31 을 myList에 담기
            hoffman = min(hoffman, 240)
            print('hofList_LCL:',hofList_LCL) #hoffman 계수 구해서 리스트에 담기


        hof_m_List_LCL=[] #공제위한 계수 조회
        append = hof_m_List_LCL.append
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속  #sql db 접속
        db = conn.cursor()
        if hof_month_max_LCL() <= 0:
          hof_month_max_LCL() ==0
        else:
            for k in range(0,hof_month_max_LCL()):
              setdata = (k , )  #변수로 검색위해
              query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
              hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
              hoffman = float(hoffman[0])  # 튜플을 float으로 변환
              append(hoffman)#조회된 월별기간 30,29,31 을 myList에 담기
            hoffman = min(hoffman, 240)
            print('hof_m_List_LCL:',hof_m_List_LCL) #hoffman 계수 구해서 리스트에 담기



        print('===============13.한시장해호프만계수 구하기==================')
        # #한시장해 호프만계수 구하기, print용
        # conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        # db = conn.cursor()
        # if sixtyfive_date < acc_date:
        #     한시장해호프만 = 0
        # else:
        #     setdata = (장해기간*12, )
        #     print('setdata:',setdata)
        #     query = db.execute("SELECT hoffman from hoff where year=%s",setdata)
        #     hoffman_data_LCL = db.fetchone()
        #     hoffman_data_LCL = float(hoffman_data_LCL[0])  # 튜플을 float으로 변환
        #     한시장해호프만 = min(240,hoffman_data_LCL)
        #     print('한시장해호프만:', hoffman_data_LCL)  #0.995850622


        print('==========================14.도시일용=======================')

        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        #오늘기준 도시일용노임
        setdata = (오늘_str, )  #변수로 검색위해, 사고일.
        setdata = (setdata[0])  # 튜플을 str로 변환
        db = conn.cursor()
        query = db.execute("SELECT dosi_month from dosi where date=%s",[setdata])
        data3 = db.fetchone()
        dosi_today = (data3[0])  # 튜플을 변환
        dosi_today_p = format(dosi_today,",")
        print('오늘기준도시일용노임:', dosi_today)  #int, 3042000
        print('오늘기준도시일용노임 타입:', type(dosi_today))


        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        #+ pd.DateOffset(months=1) -> out of range error 방지
        한시장해종료65세비교후dosi = min(한시장해종료일+ pd.DateOffset(months=1), sixtyfive_date)
        print('퇴원일+ pd.DateOffset(days=입원시작일)',퇴원일+ pd.DateOffset(days=입원시작일))

        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        단순장해기간조회_dosi = pd.date_range(ad_acc_date, 한시장해종료65세비교후dosi, freq='M')
        단순장해기간개월수_dosi = len(단순장해기간조회_dosi)
        print('단순장해기간조회_dosi:', 단순장해기간조회_dosi)
        print('단순장해기간개월수_dosi:', 단순장해기간개월수_dosi)

        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        series_월별기간조회_오늘까지_dosi = pd.Series(range(len(단순장해기간조회_dosi)), index=단순장해기간조회_dosi)  #도시일용조회
        print('series_월별기간조회_오늘까지_dosi', series_월별기간조회_오늘까지_dosi)




        #index를 for문으로
        incomeList = []
        append = incomeList.append
        for x in series_월별기간조회_오늘까지_dosi:
            장해기준 = (series_월별기간조회_오늘까지_dosi.index[x]).strftime('%Y-%m-%d')
            print('장해기준', 장해기준)
            setdata = (장해기준, )  #변수로 검색위해, 사고일.
            setdata = (setdata[0])  # 튜플을 str로 변환
            query = db.execute("SELECT dosi_month from dosi where date=%s", [setdata])

            if 장해기준 > 오늘_str:  ##오늘보다 입원기준 날짜가 크면 도시일용노임을 오늘기준으로
                data = (dosi_today, )
            else:
                data = db.fetchone()

            dosi = (data[0])  # 튜플을 변환

            #입원기준이 60세 정년보다 크면 도시일용 적용.
            if 장해기준 > sixty_date_str:
                income = dosi
            elif 장해기준 > sixtyfive_date_str:
                income = 0
            else:
                income = max(dosi, 월소득)  #도시일용과 월소득 중 높은 금액

            append(income)  #도시일용노임 리스트에 담기
        print('incomeList:', incomeList)



        print('==========================15.List calc=======================')

        #호프만끼리 공제
        hoffman_calc_LCL = []
        a3 = hofList_LCL
        a4 = hof_m_List_LCL

        for u in range(len(a3)):
            hoffman_calc_LCL.append(a3[u] - a4[u] )
        print(hoffman_calc_LCL)
        hoffman_LCL_today합계 = sum(hoffman_calc_LCL)  #오늘위해 수정,
        print('hoffman_LCL_today합계:', hoffman_LCL_today합계)

        #hoffman과 dosi 곱하기,
        ilsil_LCL = []
        a3 = hoffman_calc_LCL
        a4 = incomeList
        for i in range(len(a3)):
            ilsil_LCL.append(a3[i] * a4[i])
        print(ilsil_LCL)


        print('==================16.사고일~오늘까지 장해 합계================')
        오늘까지장해Hoffman = max(0, min(240, hoffman_LCL_today합계, 한시장해호프만) - 총입원호프만)
        print('오늘까지장해Hoffman:', 오늘까지장해Hoffman)

        장해일실수입_오늘까지 = max(0, sum(ilsil_LCL) - 입원기간일실수입총합계) * 장해율
        print('장해일실수입_오늘까지:', 장해일실수입_오늘까지)


        print('==================17.오늘이후 ~ 정년기간까지 합계=============')

        정년Hoffman = max(0,min(min(한시장해호프만, 240) - max(hoffman_LCL_today합계, 총입원호프만),min(한시장해호프만, 정년호프만) - max( hoffman_LCL_today합계, 총입원호프만)))
        print('오늘이후Hoffman:', 정년Hoffman)

        장해기간일실수입_정년 = max(월소득, dosi_today) * 정년Hoffman * 장해율
        print('장해기간일실수입_정년:', 장해기간일실수입_정년)


        print('==================18.정년 ~ 가동기간까지 합계=============')
        가동Hoffman = max(0,min(min(한시장해호프만,240) - max(정년호프만, hoffman_LCL_today합계, 총입원호프만),min(한시장해호프만,가동호프만) - max( 정년호프만, hoffman_LCL_today합계, 총입원호프만)))
        print('가동Hoffman:', 가동Hoffman)

        장해기간일실수입_가동 = dosi_today * 가동Hoffman * 장해율
        print('장해기간일실수입_가동:', 장해기간일실수입_가동)


        print('================19.장해기간 총 합계===============')
        장해기간총호프만합계 = 오늘까지장해Hoffman + 정년Hoffman + 가동Hoffman
        print('장해기간총호프만합계', 장해기간총호프만합계)

        장해기간일실수입총합계 = 장해기간일실수입_가동 + 장해기간일실수입_정년 + 장해일실수입_오늘까지
        print('장해기간일실수입총합계', 장해기간일실수입총합계)

        호프만계수총합 = 장해기간총호프만합계 + 총입원호프만
        print('호프만계수총합 :', 호프만계수총합)



        print('===============20. 위자료 계산시작====================')

        #sql wija.db접속. 위자료 한시결정위하여
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속  #sql db 접속
        db = conn.cursor()
        setdata = (장해기간, )  #변수로 검색위해
        query = db.execute("SELECT temp from wijaryo where year=%s", setdata)
        한시위자료기준 = db.fetchone()
        한시위자료기준 = float(한시위자료기준[0])  # 튜플을 float으로 변환
        print('한시위자료기준:', 한시위자료기준)


        위자료 = int(100000000 * 장해율 * 한시위자료기준)  #한시위자료
        print('위자료 :', 위자료)


        print('===============21. 최종정리====================')

        총일실수입 = 장해기간일실수입총합계 + 입원기간일실수입총합계

        print('입원기간일실수입총합계:', 입원기간일실수입총합계)
        print('장해기간일실수입총합계:', 장해기간일실수입총합계)
        print('총일실수입 : ', 총일실수입)
        print('위자료 :', 위자료)



        print('===============21. 최종정리 과실적용====================')
        과실적용 = 1 - 내과실  # 과실적용

        입원기간일실수입총합계Last = 입원기간일실수입총합계 * 과실적용
        정년기간일실수입Last = (장해일실수입_오늘까지 + 장해기간일실수입_정년) * 과실적용
        가동기간일실수입Last = 장해기간일실수입_가동 * 과실적용
        총일실수입Last = 총일실수입 * 과실적용
        위자료Last = 위자료 * (1 - 내과실 * 0.6)  #영구위자료
        가해자선지급Last = 0 * 내과실  #20210130추가, 가해자선지급은 100*20%=20만원을 마이너스
        피해자선지급Last = 0 * 과실적용  #20210130추가, 가해자선지급은 100*80%=80만원을 플러스
        손해배상합계Last = 총일실수입Last + 위자료Last + 피해자선지급Last - 가해자선지급Last

        입원기간일실수입총합계Last = format(int(입원기간일실수입총합계Last), ",")  #출력용
        정년기간일실수입Last = format(int(정년기간일실수입Last), ",")
        가동기간일실수입Last = format(int(가동기간일실수입Last), ",")
        총일실수입Last = format(int(총일실수입Last), ",")  #출력용
        위자료Last = format(int(위자료Last), ",")  #출력용
        가해자선지급Last = format(int(가해자선지급Last), ",")  #출력용
        피해자선지급Last = format(int(피해자선지급Last), ",")  #출력용
        손해배상합계Last = format(int(손해배상합계Last), ",")  #출력용

        print('입원기간일실수입총합계Last:', 입원기간일실수입총합계Last)
        print('정년기간일실수입Last:', 정년기간일실수입Last)
        print('가동기간일실수입Last:', 가동기간일실수입Last)
        print('총일실수입Last :', 총일실수입Last)
        print('위자료Last:', 위자료Last)
        print('가해자선지급Last:', 가해자선지급Last)
        print('피해자선지급Last:', 피해자선지급Last)
        print('손해배상합계Last:', 손해배상합계Last)



        fulfillmentText = '\n==========================\n📜위손사_BOT ver 1.0 \n==========================\n📜기초정보 및 보상금 평가근거\n========================== \n\n 1.날짜 및 나이 정보\n -사고당시 나이 : 만' + str(age) + '세 \n -사고일자 : ' + str(acc_date) + '\n -생년월일 : ' + str(birth) + '\n -정년(60세)종료일 :' + str(sixty_date) + '\n -가동기간(65세)종료일 :' + str(sixtyfive_date) + ' \n\n 2.기간 정보 \n -입원기간 : ' + str(numb1) + '일 \n -장해기간 : '+str(한시장해종료일_str)+' \n\n 3.소득관련 정보 \n -월소득 : ' + str(월소득) + '원 \n -사고당시 도시일용노임 : ' + str(dosi_acc_p) + '원 \n -현재 도시일용노임 :' + str(dosi_today_p) + '원 \n\n 4.과실비율 및 장해율 \n -나의 과실비율 :' + str(numb2) + '% \n -나의장해율 :' + str(numb3) + '% \n\n 5.중간이자 및 생계비공제 정보 \n -입원호프만계수 :'+str(총입원호프만)+' \n  -장해기간호프만 :'+str(한시장해호프만)+'\n -정년호프만계수 : '+str(정년호프만)+' \n -가동호프만계수 : '+str(가동호프만)+'\n\n 6.위자료 기준 \n 위자료는 나이, 직업 등 여러 요소를 참작하여 산정. \n\n\n==========================\n📜예상 보상금(한시장해) \n========================== \n\n 1️⃣일실수입(입원) : ' + str(입원기간일실수입총합계Last) + '원 \n 2️⃣일실수입(정년) :' + str( 정년기간일실수입Last) + '원 \n 3️⃣일실수입(가동기간) : ' + str(가동기간일실수입Last) + ' 원 \n----------------------------------------------------\n 4️⃣일실수입합계 : '+str(총일실수입Last)+'\n----------------------------------------------------\n 5️⃣위자료 :' + str(위자료Last) + '원\n 6️⃣피해자측 선지급 :'+str(피해자선지급Last)+'\n 7️⃣가해자측 선지급 : '+str(가해자선지급Last)+'\n----------------------------------------------------\n 8️⃣보상금 합계(4️⃣+5️⃣+6️⃣-7️⃣) :' + str(손해배상합계Last) + '원 \n\n\n 제일 처음으로 돌아가려면 채팅창에 "홈" 입력 또는  https://page.line.me/964ctcvt  <-링크클릭.\n\n\n [참고] \n-각 기간별 변동 도시일용노임 적용.\n -실제월소득과 도시일용노임 중 높은 소득을 적용. \n -정년이후로는 도시일용노임 적용.\n -중간이자 공제는 호프만계수 적용하며, 최대인정계수는 240H.'


        ########################################################################################
        ########################################################################################
        ########################################################################################
        ########################################################################################
        ########################################################################################

    #==============교통사고 한시장해_don't know====================================

    elif query_result.get('action') == 'temporary1':
        #get data
        date1 = query_result.get('parameters').get('date')  #사고일
        date2 = query_result.get('parameters').get('date1')  #생년월일
        #scode = query_result.get('parameters').get('scode')  #s code
        numb1 = int(query_result.get('parameters').get('number1'))  #입원기간
        numb2 = int(query_result.get('parameters').get('number2'))  #내과실비율
        # numb3 = int(query_result.get('parameters').get('number3'))  #장해율
        # numb4 = int(query_result.get('parameters').get('number4'))  #장해기간
        numb5 = int(query_result.get('parameters').get('number5'))  #월소득
        numb6 = int(query_result.get('parameters').get('number6'))  #가해자 선지급
        numb7 = int(query_result.get('parameters').get('number7'))  #피해자 선지급
        numb8 = int(query_result.get('parameters').get('number8'))  #


        print('date1 = {0}'.format(date1))
        print('date2 = {0}'.format(date2))
        #print('scode = {0}'.format(scode))
        print('num1 = {0}'.format(numb1))
        print('num2 = {0}'.format(numb2))
        # print('num3 = {0}'.format(numb3))
        # print('num4 = {0}'.format(numb4))
        print('num5 = {0}'.format(numb5))
        print('num6 = {0}'.format(numb6))
        print('num7 = {0}'.format(numb7))
        print('num8 = {0}'.format(numb8))


        print('===============장해율구하기====================')
        #한시장해기간 호프만, hoffman sql data 불러오기
        #sql nwehof.db 접속, 호프만계수
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        db = conn.cursor()
        setdata = (numb8, )  #변수로 검색위해
        query = db.execute("SELECT percent from s_code where code=%s", setdata)
        data = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
        data = (data[0])  # 튜플을 float으로 변환
        percent = data
        print('percent 타입:', type(percent))
        print('percent :', percent)

        setdata = (numb8, )  #변수로 검색위해
        query = db.execute("SELECT year from s_code where code=%s", setdata)
        data1 = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
        data1 = (data1[0])  #
        year = data1
        print('year 타입:', type(year))
        print('year :', year)



        사고일 = date1
        생년월일 = date2
        내과실 = numb2 * 0.01
        장해율 = percent * 0.01
        장해기간 = year
        월소득 = numb5



        print('===============날짜 구하기====================')

        #생년월일, 날짜str에서 datetime로 변환.
        dt = maya.parse(date2).datetime()
        print(dt)
        print('dt타입:', type(dt))
        #날짜만 구하기
        birth = datetime.date(dt)
        print('생년월일 :', birth)


        #사고일, 날짜str에서 datetime로 변환. 사고일에서 날짜 더하기 위함.
        accident_date = maya.parse(date1).datetime()
        print('사고일 :', accident_date)
        #날짜만 구하기(시분초 제외)
        acc_date = datetime.date(accident_date)
        print('사고일 날짜만추출:', acc_date)


        #사고당시 만나이 구하기(사고일-생년월일),  사고시점의 나이
        age = (acc_date - birth) // timedelta(days=365)  #나이로 계산 int. 출력용
        age_month = (acc_date - birth) // timedelta(365 / 12)  #사고당시 나이에 해당하는 총 일수를 월로 변환. 700개월 등
        print('age_month :', age_month)  #700개월 등, int
        print('사고일-생년월일 :', acc_date - birth)  #2020-01-01
        print('사고당시 만 나이:', age)  # 15, int


        #한시장해종료일, 사고일에서 장해기간numb4(년도) 더하기.
        한시장해종료일 = accident_date + pd.DateOffset(years=장해기간, days=-1)
        #날짜만 구하기(시분초 제외)
        한시장해종료일 = datetime.date(한시장해종료일)  #2020-01-01, datetime.date
        한시장해종료일_str = 한시장해종료일.strftime("%Y-%m-%d") #str로 변환
        print('한시장해종료일_str:', 한시장해종료일_str)  #2020-01-01

        #정년 종료일(60세 기준),
        sixty_date = datetime.date(birth + pd.DateOffset(years=60, days=-1))
        print('정년60세 종료일:', sixty_date)  #2020-01-01

        #정년 종료일(60세 기준) str
        sixty_date_str = sixty_date.strftime("%Y-%m-%d")
        print('sixty_date_str:', sixty_date_str)

        #가동 종료일(60세 기준),
        sixtyfive_date = datetime.date(birth + pd.DateOffset(years=65, days=-1))
        print('정년60세 종료일:', sixtyfive_date)  #2020-01-01

        #가동 종료일(60세 기준) str
        sixtyfive_date_str = sixtyfive_date.strftime("%Y-%m-%d")
        print('sixtyfive_date_str:', sixtyfive_date_str)

        print('===============퇴원일 구하기-호프만계수 시작====================')

        #이제 퇴원일 구하기!, 퇴원일은 사고일에서 numb1을 더한 값
        퇴원일 = datetime.date(acc_date + pd.DateOffset(days=numb1-1)) #numb1은 입원기간
        print('퇴원일:',퇴원일)
        print('퇴원일 타입:',type(퇴원일))
        # 퇴원일_str = 퇴원일.strftime("%Y-%m-%d") #퇴원일을 str로 변환
        # print('퇴원일_str',퇴원일_str)
        # print('퇴원일_str 타입:',type(퇴원일_str))

        print('==========오늘날짜 구하기 ==========')

        #오늘날짜 구하기.
        오늘 = datetime.now()
        #날짜만 구하기(시분초 제외)
        오늘 = datetime.date(오늘)  #2020-01-01, datetime.date
        오늘_str = 오늘.strftime("%Y-%m-%d") #str로 변환
        print('오늘_str:',오늘_str)
        print('오늘_str type:',type(오늘_str))
        print('오늘:', 오늘)
        print('오늘 타입:', type(오늘))

        # if acc_date > 오늘:
        #     오늘 = acc_date
        # else:
        #     오늘 = 오늘

        print('============!!!!입원기간반영위한 사고일조정!!!==============')
        #입원기간 호프만계수 버리기용도
        #도시일용은 다음달 계수로 반영. 그렇기 때문에 이걸 적용해야 함.
        #반대로 첫사고일 부터 한달채움 계산은 사고일을 기준!! 이거적용하면 안됨. 이것만 해결하면 될거 같은데 미치겠다 진짜 나좀 살려주라!!
        #입원기간에서 for월별입원기간조회하고 실제입원일수 계산할때만 한달채움을 사용.
        #입원만 반영해야 함.
        #최초 입원일이 1일이 아닌경우 입원계산에서 최초달을 버리기 위함.
        입원시작년 = int(acc_date.strftime('%Y'))  # 해당년도 뽑아내기
        입원시작월 = int(acc_date.strftime('%m'))  # 해당월 뽑아내기
        입원시작일 = int(acc_date.strftime('%d'))
        print('입원시작년,월,일',입원시작년,입원시작월,입원시작일)

        #사고일의다음달 구하기
        사고일다음달 = acc_date+ pd.DateOffset(months=1)
        print('사고일다음달:',사고일다음달)

        #사고일 다음달의 1일 구하기
        사고일다음달첫날 = datetime.date(사고일다음달.replace(day=1))
        print('date first:',사고일다음달첫날)
        print('date first:',type(사고일다음달첫날))

        if 입원시작일 ==1: #입원시작일이 1일이면 그대로, 2일부터면 버리기.
          ad_acc_date = acc_date
        else:
          ad_acc_date = 사고일다음달첫날
        print('ad_acc_date:',ad_acc_date)
        print('ad_acc_date:',type(ad_acc_date))

        #사고일의 다음달 날짜가 사고월의 총일수와 동일하게 되는 경우. 1달로 인식하도록.



        print('===============정년기간개월수 및 실제일수==============')
        #호프만계수
        단순정년기간조회 = pd.date_range(acc_date, sixty_date, freq='1m')  # 생일~가동기간까지 1달씩
        단순정년기간개월수 = len(단순정년기간조회)
        print('단순정년기간조회:', 단순정년기간조회)
        print('단순정년기간개월수:', 단순정년기간개월수)

        #정년기간 실제일수 구하기, 정확한 계산위해. 실제일수가 더 큰 경우는 없음.
        실제정년일수 = ((sixty_date - acc_date) // timedelta(days=1) + 1)
        print('실제정년_days:', 실제정년일수)  #1000 int , 오늘적용위해 수정.

        sum1 = 0
        monthList = []
        append = monthList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        정년기간개월수_for = 단순정년기간조회.strftime('%d')  #for문 적용 위함.
        for i in 정년기간개월수_for:
            sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
            append(i)
        for_조회정년일수 = sum1
        print('for_조회정년일수:', for_조회정년일수)

        실제정년일수와차이일수 = for_조회정년일수 - 실제정년일수
        print('실제정년일수와차이일수:', 실제정년일수와차이일수)  #0보다 크면 over된 수치.

        #아래 정년기간개월수()함수에 정년기간비교해서 정년마지막일보다도 더 크면 2개월을 공제해야함.
        #실제정년일수보다 for_조회정년일수가 0보다도 크면 무조건 1은 빼줘야 함.
        정년마지막년 = int(sixty_date.strftime('%Y'))  # 정년마지막기간 해당년도 뽑아내기
        정년마지막월 = int(sixty_date.strftime('%m'))  # 정년마지막기간 해당월 뽑아내기
        정년마지막월_말일 = calendar.monthrange(정년마지막년, 정년마지막월)[1]
        print('정년마지막월_말일:', 정년마지막월_말일)


        #단순개월수조회가 2개월 이상 over되는 경우때문에 이 함수 사용.
        def 정년기간개월수():
            if 실제정년일수 < for_조회정년일수 and 실제정년일수와차이일수 > 정년마지막월_말일:
                return 단순정년기간개월수 - 2  #
            elif 실제정년일수 < for_조회정년일수 and 실제정년일수와차이일수 <= 정년마지막월_말일:
                return 단순정년기간개월수 - 1  #여기를 수정. 끼리낄 마이너스해서 남은일수 나누기 30.4166으로 나눈값을 마이너스.
            else:
                return 단순정년기간개월수
        print('정년기간개월수():', 정년기간개월수())

        print('===============가동기간개월수 및 실제일수==============')
        #호프만계수
        단순가동기간조회 = pd.date_range(acc_date, sixtyfive_date, freq='1m')  # 생일~가동기간까지 1달씩
        단순가동기간개월수 = len(단순가동기간조회)
        print('단순가동기간조회:', 단순가동기간조회)
        print('단순가동기간개월수:', 단순가동기간개월수)

        #가동기간 실제일수 구하기, 정확한 계산위해. 실제일수가 더 큰 경우는 없음.
        실제가동일수 = ((sixtyfive_date - acc_date) // timedelta(days=1) + 1)
        print('실제가동_days:', 실제가동일수)  #1000 int , 오늘적용위해 수정.

        sum1 = 0
        monthList = []
        append = monthList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        가동기간개월수_for = 단순가동기간조회.strftime('%d')  #for문 적용 위함.
        for i in 가동기간개월수_for:
            sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
            append(i)
        for_조회가동일수 = sum1
        print('for_조회정년일수:', for_조회가동일수)

        실제가동일수와차이일수 = for_조회가동일수 - 실제가동일수
        print('실제가동일수와차이일수:', 실제가동일수와차이일수)  #0보다 크면 over된 수치.

        #아래 가동기간개월수()함수에 가동기간비교해서 가동마지막일보다도 더 크면 2개월을 공제해야함.
        #실제가동일수보다 for_조회가동일수가 0보다도 크면 무조건 1은 빼줘야 함.
        가동마지막년 = int(sixtyfive_date.strftime('%Y'))  # 가동마지막기간 해당년도 뽑아내기
        가동마지막월 = int(sixtyfive_date.strftime('%m'))  # 정년마지막기간 해당월 뽑아내기
        가동마지막월_말일 = calendar.monthrange(가동마지막년, 가동마지막월)[1]
        print('가동마지막월_말일:', 가동마지막월_말일)


        def 가동기간개월수():
            if 실제가동일수 < for_조회가동일수 and 실제가동일수와차이일수 > 가동마지막월_말일:
                return 단순가동기간개월수 - 2  #
            elif 실제가동일수 < for_조회가동일수 and 실제가동일수와차이일수 <= 가동마지막월_말일:
                return 단순가동기간개월수 - 1
            else:
                return 단순가동기간개월수


        print('가동기간개월수():', 가동기간개월수())



        print('===============대표적호프만계수====================')


        #한시장해기간 호프만, hoffman sql data 불러오기
        #sql nwehof.db 접속, 호프만계수
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        db = conn.cursor()
        setdata = (장해기간 * 12, )  #변수로 검색위해
        query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
        data = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
        data = float(data[0])  # 튜플을 float으로 변환
        한시장해호프만 = data
        print('한시장해기간 호프만 타입:', type(한시장해호프만))
        print('한시장해기간 호프만:', 한시장해호프만)

        #정년(60세) 호프만, hoffman sql data 불러오기
        db = conn.cursor()
        setdata = (max(0,정년기간개월수()), )  #변수로 검색위해
        query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
        data4 = db.fetchone()
        data4 = (data4[0])  # 튜플을 float으로 변환
        정년호프만 = data4
        print('정년 호프만 타입:', type(data4))
        print('정년기간 호프만:', data4)

        #가동기간(65세) 호프만, hoffman sql data 불러오기
        db = conn.cursor()
        setdata = (max(0,가동기간개월수()), )  #변수로 검색위해
        query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
        data5 = db.fetchone()
        data5 = (data5[0])  # 튜플을 float으로 변환
        가동호프만 = data5
        print('가동기간 타입:', type(data5))
        print('가동기간 호프만:', data5)



        print('===============================입원기간===============================')
        print('==========================1.월별 말일 조회!!!!!=======================')

        #월별기간조회해서 총합구하고 나눠서 개월수 구하는 매우 중요한 용도!!!!!진심 중요

        퇴원일65세비교후 = min(퇴원일, sixtyfive_date)  # 여기서 퇴원일은 65세와 비교해서 적용해야 함.

        #사고일로부터 한달 두달 달수 계산위함.
        단순입원기간조회 = pd.date_range(acc_date, 퇴원일65세비교후, freq='M')
        단순입원기간개월수 = len(단순입원기간조회)
        print('단순입원기간조회:', 단순입원기간조회)
        print('단순입원기간개월수:', 단순입원기간개월수)


        series_월별기간조회 = pd.Series(range(len(단순입원기간조회)), index=단순입원기간조회)  #도시일용조회
        print('series_월별기간조회', series_월별기간조회)

        #실제 일수 구하기, 실제사고일
        admission_days = max(0, ((퇴원일65세비교후 - acc_date) // timedelta(days=1))+1)
        print('admission_days:', admission_days)  #1000 int , 오늘적용위해 수정.


        sum1 = 0
        monthList = []
        append = monthList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        입원기간개월수_for = 단순입원기간조회.strftime('%d')  #for문 적용 위함.
        for i in 입원기간개월수_for:
            sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
            append(i)
        for_월별입원기간조회 = sum1
        print('for_월별입원기간조회:', sum1)
        print('monthList', monthList)


        실제입원일수와차이일수 = for_월별입원기간조회 - admission_days
        print('실제입원일수와차이일수:', 실제입원일수와차이일수)  #0보다 크면 over된 수치.

        fullmonth_days = for_월별입원기간조회 - 실제입원일수와차이일수
        print('fullmonth_days',fullmonth_days)

        def 입원기간개월수():
            if admission_days < for_월별입원기간조회 and fullmonth_days > admission_days:
                return 단순입원기간개월수 - 2  #
            elif admission_days < for_월별입원기간조회 and fullmonth_days <= admission_days:
                return 단순입원기간개월수 - 1
            else:
                return 단순입원기간개월수


        print('입원기간개월수():', 입원기간개월수())

        print('============2.총입원호프만계수 구하기==============')

        #입원 총 호프만계수 구하기
        setdata = (입원기간개월수(), )  #오늘적용위해 수정
        print('setdata:', setdata)
        query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
        hoffman_data = db.fetchone()
        hoffman_data = float(hoffman_data[0])  # 튜플을 float으로 변환
        총입원호프만 = min(240, hoffman_data)
        print('총입원기간 호프만:', hoffman_data)  #0.995850622





        print('=========3. 오늘까지 진정한 최대 개월수 구하기======')

        단순입원기간조회_오늘까지 = pd.date_range(acc_date, min(오늘, 퇴원일65세비교후), freq='1M')  #
        print('단순입원기간조회:', 단순입원기간조회)

        단순입원기간개월수_오늘까지 = len(단순입원기간조회_오늘까지)
        print('단순입원기간개월수_오늘까지:', 단순입원기간개월수_오늘까지)

        #오늘까지 실제 일수 구하기
        admission_days = max(0, ((min(오늘, 퇴원일65세비교후) - acc_date) // timedelta(days=1))+1)
        print('admission_days:', admission_days)  #1000 int , 오늘적용위해 수정.

        sum1 = 0
        monthList = []
        append = monthList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        입원기간개월수_for_오늘까지 = 단순입원기간조회_오늘까지.strftime('%d')  #for문 적용 위함.
        for i in 입원기간개월수_for_오늘까지:
            sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
            append(i)
        for_월별입원기간조회_오늘까지 = sum1
        print('for_월별입원기간조회_오늘까지:', sum1)
        print('monthList', monthList)

        실제입원일수와차이일수_오늘까지 = for_월별입원기간조회_오늘까지 - admission_days
        print('실제입원일수와차이일수:', 실제입원일수와차이일수)  #0보다 크면 over된 수치.


        fullmonth_days = for_월별입원기간조회 - 실제입원일수와차이일수_오늘까지
        print('fullmonth_days:',fullmonth_days)

        #아래 가동기간개월수()함수에 가동기간비교해서 가동마지막일보다도 더 크면 2개월을 공제해야함.
        #실제가동일수보다 for_조회가동일수가 0보다도 크면 무조건 1은 빼줘야 함.
        입원마지막년_오늘까지 = int(퇴원일.strftime('%Y'))  # 가동마지막기간 해당년도 뽑아내기
        입원마지막월_오늘까지 = int(퇴원일.strftime('%m'))  # 정년마지막기간 해당월 뽑아내기
        입원마지막월_말일_오늘까지 = calendar.monthrange(입원마지막년_오늘까지, 입원마지막월_오늘까지)[1]
        print('입원마지막월_말일_오늘까지:', 입원마지막월_말일_오늘까지)

        #오늘까지 총 입원개월수 선정
        def 입원기간개월수_오늘까지():
            if admission_days < for_월별입원기간조회_오늘까지 and fullmonth_days > admission_days:
                return 단순입원기간개월수_오늘까지 - 2  #
            elif admission_days < for_월별입원기간조회_오늘까지 and fullmonth_days <= admission_days:
                return 단순입원기간개월수_오늘까지 - 1
            else:
                return 단순입원기간개월수_오늘까지


        print('입원기간개월수_오늘까지():', 입원기간개월수_오늘까지())


        print('================4.for문으로 오늘까지 호프만계수 구하기==================')
        #저 위에서 다 정리하고 여기에 개월수 넣기.

        hofList = []  #호프만 계수
        append = hofList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        db = conn.cursor()
        if 입원기간개월수_오늘까지() == 0:
            입원기간개월수_오늘까지() == 0
        else:
            for o in range(1, 입원기간개월수_오늘까지() + 1):
                setdata = (o, )  #변수로 검색위해
                query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
                hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
                hoffman = float(hoffman[0])  # 튜플을 float으로 변환
                append(hoffman)
            hoffman = min(hoffman, 240)
        print('hofList:', hofList)  #hoffman 계수 구해서 리스트에 담기

        hof_m_List = []  #공제위한 계수 조회
        append = hof_m_List.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        if 입원기간개월수_오늘까지() == 0:
            입원기간개월수_오늘까지() == 0
        else:
            for k in range(0, 입원기간개월수_오늘까지()):
                setdata = (k, )  #변수로 검색위해
                query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
                hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
                hoffman = float(hoffman[0])  # 튜플을 float으로 변환
                append(hoffman)
            hoffman = min(hoffman, 240)
        print('hof_m_List:', hof_m_List)  #hoffman 계수 구해서 리스트에 담기


        print('==========================5.도시일용=======================')

        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        #오늘기준 도시일용노임
        setdata = (오늘_str, )  #변수로 검색위해, 사고일.
        setdata = (setdata[0])  # 튜플을 str로 변환
        db = conn.cursor()
        query = db.execute("SELECT dosi_month from dosi where date=%s", [setdata])
        data3 = db.fetchone()
        dosi_today = (data3[0])  # 튜플을 변환
        dosi_today_p = format(dosi_today, ",")
        print('오늘기준도시일용노임:', dosi_today)  #int, 3042000

        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        #사고일기준 도시일용노임
        setdata = (acc_date, )  #변수로 검색위해, 사고일.
        setdata = (setdata[0])  # 튜플을 str로 변환
        db = conn.cursor()
        query = db.execute("SELECT dosi_month from dosi where date=%s", [setdata])
        data3 = db.fetchone()
        dosi_acc = (data3[0])  # 튜플을 변환
        dosi_acc_p = format(dosi_acc, ",")
        print('사고일기준도시일용노임:', dosi_acc)  #int, 3042000


        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        퇴원일65세비교후dosi = min(퇴원일+ pd.DateOffset(months=1), sixtyfive_date)
        print('퇴원일+ pd.DateOffset(days=입원시작일)',퇴원일+ pd.DateOffset(days=입원시작일))

        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        단순입원기간조회_dosi = pd.date_range(ad_acc_date, 퇴원일65세비교후dosi, freq='M')
        단순입원기간개월수_dosi = len(단순입원기간조회_dosi)
        print('단순입원기간조회_dosi:', 단순입원기간조회_dosi)
        print('단순입원기간개월수_dosi:', 단순입원기간개월수_dosi)

        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        series_월별기간조회_dosi = pd.Series(range(len(단순입원기간조회_dosi)), index=단순입원기간조회_dosi)  #도시일용조회
        print('series_월별기간조회_dosi', series_월별기간조회_dosi)


        incomeList = []
        append = incomeList.append
        for x in series_월별기간조회_dosi:
            입원기준 = (series_월별기간조회_dosi.index[x]).strftime('%Y-%m-%d')
            print('입원기준', 입원기준)
            ##오늘보다 입원기준 날짜가 크면 도시일용노임을 오늘기준으로
            setdata = (입원기준, )  #변수로 검색위해, 사고일.
            setdata = (setdata[0])  # 튜플을 str로 변환
            query = db.execute("SELECT dosi_month from dosi where date=%s", [setdata])

            if 입원기준 > 오늘_str:
                data = (dosi_today, )
            else:
                data = db.fetchone()

            dosi = (data[0])  # 튜플을 변환

            #입원기준이 60세 정년보다 크면 도시일용 적용.
            if 입원기준 > sixty_date_str:
                income = dosi
            elif 입원기준 > sixtyfive_date_str:
                income = 0
            else:
                income = max(dosi, 월소득)  #도시일용과 월소득 중 높은 금액

            append(income)  #도시일용노임 리스트에 담기
        print('incomeList:', incomeList)





        print('==========================6.List calc=======================')

        #호프만끼리 공제
        hoffman_calc=[]
        a1 = hofList
        a2 = hof_m_List

        for w in range(len(a1)):
          hoffman_calc.append(a1[w]-a2[w])
        print(hoffman_calc)
        hoffman_today합계 = sum(hoffman_calc) #오늘위해 수정
        print('hoffman_calc합계:',sum(hoffman_calc))


        #hoffman과 dosi 곱하기,
        ilsil_admission = []
        a1 = hoffman_calc
        a2 = incomeList
        for i in range(len(a1)):
            ilsil_admission.append(a1[i] * a2[i])
        print(ilsil_admission)

        print('===============7.사고일~오늘까지 입원합계===================')
        #ilsil 안의 값 모두 더하기. 그러면 일실수입 합계 구해짐
        입원기간일실수입_오늘까지=sum(ilsil_admission)
        print('입원기간일실수입_오늘까지:',입원기간일실수입_오늘까지)

        print('==================8.오늘이후~퇴원까지 입원합계===============')
        #총입원호프만이 0인경우 오류방지 위함.
        if 총입원호프만 == 0:
            income =0
        else:
            income = income
        print('income',income)

        #오늘이후 정년까지 호프만계수 산정, 정년이후 퇴원까지 호프만계수 산정
        #총입원호프만이 정년호프만보다 큰 경우 정년기간이후 가동기간까지는 도시일용.
        #총입원호프만이 정년호프만보다 작은 경우 예전 그대로.
        #장해쪽은 이미 모든게 적용되서 필요 없고, 입원의 경우 오늘날짜보다 정년이 긴 경우 정상적인 계산이 되지 않는 관계로 이 if함수를 적용하게됨.
        #한시장해호프만을 따로 적용하지는 않은상태. 한시 오류 가능성 있음.
        if 총입원호프만 <= 정년호프만:
          오늘이후Hoffman = 총입원호프만 - hoffman_today합계
          입원기간일실수입_오늘이후 = income * 오늘이후Hoffman
          print('오늘이후Hoffman:', 오늘이후Hoffman)
          print('입원기간일실수입_오늘이후:', 입원기간일실수입_오늘이후)

        elif 총입원호프만 > 정년호프만:
          오늘이후정년까지Hoffman = max(정년호프만,hoffman_today합계) - hoffman_today합계
          오늘정년이후가동까지Hoffman = max(0, min(가동호프만, 총입원호프만) -  max(정년호프만,hoffman_today합계))
          오늘이후Hoffman = 오늘이후정년까지Hoffman + 오늘정년이후가동까지Hoffman
          print('오늘이후정년까지Hoffman:', 오늘이후정년까지Hoffman)
          print('오늘정년이후가동까지Hoffman:', 오늘정년이후가동까지Hoffman)
          print('오늘이후Hoffman:', 오늘이후Hoffman)

          입원기간일실수입_오늘이후 = (월소득 * 오늘이후정년까지Hoffman) + (dosi_today * 오늘정년이후가동까지Hoffman)
          print('입원기간일실수입_오늘이후:', 입원기간일실수입_오늘이후)


        print('================9.입원기간일실수입 총합계====================')
        입원기간일실수입총합계 = 입원기간일실수입_오늘이후 + 입원기간일실수입_오늘까지
        print('입원기간일실수입총합계',입원기간일실수입총합계)
        print('입원기간 총호프만계수:', 오늘이후Hoffman + hoffman_today합계)




        if 장해기간 >=65:
            print('==============================후유잘해===============================')
            print('======================10.오늘까지 장해기간(max 정년)===================')

            #for old man, 10번 11번 이 함수 추가.
            #오늘보다 정년이 더 짧은 분들은 연세가 매우 많으신 분들 위한 함수. 굳이 정년적용할 필요 없이 그냥 가동기간과 사고일 비교위해 이 함수 적용.
            if 오늘 > sixty_date:
              sixty_date = sixtyfive_date
            else:
              sixty_date = sixty_date
            print('sixty_date',sixty_date)


            #여기서부터는 정상.

            월별기간조회_오늘까지 = pd.date_range(ad_acc_date,min(sixty_date,오늘), freq='1M')
            print('월별기간조회_오늘까지:', 월별기간조회_오늘까지)

            series_월별기간조회_오늘까지 = pd.Series(range(len(월별기간조회_오늘까지)), index=월별기간조회_오늘까지)
            print('series_월별기간조회_오늘까지:',series_월별기간조회_오늘까지)


            월별기간조회_오늘까지 = 월별기간조회_오늘까지.strftime('%d')
            print('월별기간조회_오늘까지:',월별기간조회_오늘까지)

            sum1=0
            monthList=[]
            append = monthList.append
            for i in 월별기간조회_오늘까지:
              sum1 += int(i) #정해진 기간의 월말 일수 모두 더하기
              #print('월별기간조회_오늘까지 sum:',sum1)
              append(i)
            for_월별장해기간조회 = sum1
            월말기준개월수 = len(월별기간조회_오늘까지) # 10, int, 이수치가 실질적으로 호프만계수에 적용되는 부분. 개월수
            print('월말기준개월수:',월말기준개월수)


            print('monthList',monthList)


            print('========11.오늘까지 장해기간(max 정년) 진정한 최대 개월수 구하기=============')

            #for old man, 10번 11번 이 함수 추가.
            #오늘보다 정년이 더 짧은 분들은 연세가 매우 많으신 분들 위한 함수. 굳이 정년적용할 필요 없이 그냥 가동기간과 사고일 비교위해 이 함수 적용.
            if 오늘 > sixty_date:
              sixty_date = sixtyfive_date
            else:
              sixty_date = sixty_date
            print('sixty_date',sixty_date)


            #여기서부터는 정상.
            #실제 일수 구하기
            LCL_days =max(0,((min(sixty_date,오늘)- ad_acc_date) // timedelta( days=1))+1)
            print('admission_days:',LCL_days) #1000 int

            실제장해일수와차이일수 = for_월별장해기간조회 - LCL_days
            print('실제장해일수와차이일수:', 실제장해일수와차이일수)  #0보다 크면 over된

            fullmonth_days = for_월별장해기간조회 - 실제장해일수와차이일수
            print('fullmonth_days',fullmonth_days)


            def hof_month_max_LCL():
                if LCL_days < for_월별입원기간조회 and fullmonth_days > LCL_days:
                    return 월말기준개월수 - 2  #
                elif LCL_days < for_월별입원기간조회 and fullmonth_days <= LCL_days:
                    return 월말기준개월수 - 1
                else:
                    return 월말기준개월수
            print('hof_month_max():', hof_month_max_LCL())


            print('========12.오늘까지 장해 for문으로 호프만계수 구하기=========')
            #저 위에서 다 정리하고 여기에 개월수 넣기.

            hofList_LCL=[] #호프만 계수
            append = hofList_LCL.append
            if hof_month_max_LCL() <= 0: #0보다 작은경우 0으로 표시해서 오류 없애기
              hof_month_max_LCL() ==0
            else:
              for o in range(1,hof_month_max_LCL()+1):

                conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
                db = conn.cursor()
                setdata = (o , )  #변수로 검색위해
                query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
                hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
                hoffman = float(hoffman[0])  # 튜플을 float으로 변환
                append(hoffman)#조회된 월별기간 30,29,31 을 myList에 담기
              hoffman = min(hoffman, 240)
              print('hofList_LCL:',hofList_LCL) #hoffman 계수 구해서 리스트에 담기


            hof_m_List_LCL=[] #공제위한 계수 조회
            append = hof_m_List_LCL.append
            if hof_month_max_LCL() <= 0:
              hof_month_max_LCL() ==0
            else:
              for k in range(0,hof_month_max_LCL()):

                conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
                db = conn.cursor()
                setdata = (k , )  #변수로 검색위해
                query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
                hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
                hoffman = float(hoffman[0])  # 튜플을 float으로 변환
                append(hoffman)#조회된 월별기간 30,29,31 을 myList에 담기
              hoffman = min(hoffman, 240)
              print('hof_m_List_LCL:',hof_m_List_LCL) #hoffman 계수 구해서 리스트에 담기


            print('==========================13.도시일용=======================')

            conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
            #오늘기준 도시일용노임
            setdata = (오늘_str, )  #변수로 검색위해, 사고일.
            setdata = (setdata[0])  # 튜플을 str로 변환
            db = conn.cursor()
            query = db.execute("SELECT dosi_month from dosi where date=%s",[setdata])
            data3 = db.fetchone()
            dosi_today = (data3[0])  # 튜플을 변환
            dosi_today_p = format(dosi_today,",")
            print('오늘기준도시일용노임:', dosi_today)  #int, 3042000
            print('오늘기준도시일용노임 타입:', type(dosi_today))



            #index를 for문으로
            incomeList=[]
            append = incomeList.append
            for x in series_월별기간조회_오늘까지:
              장해기준 = (series_월별기간조회_오늘까지.index[x]).strftime('%Y-%m-%d')
              print('장해기준',장해기준)
              setdata = (장해기준, )  #변수로 검색위해, 사고일.
              setdata = (setdata[0])  # 튜플을 str로 변환
              query = db.execute("SELECT dosi_month from dosi where date=%s",[setdata])


              if 장해기준 > 오늘_str:##오늘보다 입원기준 날짜가 크면 도시일용노임을 오늘기준으로
                data = (dosi_today,)
              else:
                data = db.fetchone()

              dosi = (data[0])  # 튜플을 변환


              #입원기준이 60세 정년보다 크면 도시일용 적용.
              if 장해기준 > sixty_date_str:
                income = dosi
              elif 장해기준 > sixtyfive_date_str:
                income = 0
              else:
                income = max(dosi,월소득) #도시일용과 월소득 중 높은 금액

              append(income) #도시일용노임 리스트에 담기
            print('incomeList:',incomeList)



            print('==========================14.List calc=======================')

            #호프만끼리 공제
            hoffman_calc_LCL=[]
            a3 = hofList_LCL
            a4 = hof_m_List_LCL

            for u in range(len(a3)):
              hoffman_calc_LCL.append(a3[u]-a4[u])
            print(hoffman_calc_LCL)
            hoffman_LCL_today합계 = sum(hoffman_calc_LCL) #오늘위해 수정,
            print('hoffman_LCL_today합계:',hoffman_LCL_today합계)

            #hoffman과 dosi 곱하기,
            ilsil_LCL = []
            a3 = hoffman_calc_LCL
            a4 = incomeList
            for i in range(len(a3)):
                ilsil_LCL.append(a3[i] * a4[i])
            print(ilsil_LCL)


            print('==================15.사고일~오늘까지 장해 합계================')
            오늘까지장해Hoffman = max(0, min(240 - 총입원호프만, hoffman_LCL_today합계 - 총입원호프만))
            print('오늘까지장해Hoffman:',오늘까지장해Hoffman)

            장해일실수입_오늘까지=max(0, sum(ilsil_LCL) - 입원기간일실수입총합계) * 장해율
            print('장해일실수입_오늘까지:',장해일실수입_오늘까지)

            print('==================16.오늘이후 ~ 정년기간까지 합계=============')
            정년Hoffman = max(0, min(240 - max(hoffman_LCL_today합계,총입원호프만), 정년호프만 - max(hoffman_LCL_today합계,총입원호프만)))
            print('오늘이후Hoffman:',정년Hoffman)

            장해기간일실수입_정년 = max(월소득,dosi_today) * 정년Hoffman * 장해율
            print('장해기간일실수입_정년:',장해기간일실수입_정년)


            print('==================17.정년 ~ 가동기간까지 합계=============')
            가동Hoffman = max(0, min(240 - max(정년호프만, hoffman_LCL_today합계, 총입원호프만) , 가동호프만 - max(정년호프만, hoffman_LCL_today합계, 총입원호프만)))
            print('가동Hoffman:',가동Hoffman)

            장해기간일실수입_가동 = dosi_today * 가동Hoffman * 장해율
            print('장해기간일실수입_가동:',장해기간일실수입_가동)



            print('================18.장해기간 총 합계===============')
            장해기간총호프만합계 = 오늘까지장해Hoffman + 정년Hoffman + 가동Hoffman
            print('장해기간총호프만합계',장해기간총호프만합계)

            장해기간일실수입총합계 = 장해기간일실수입_가동 + 장해기간일실수입_정년 + 장해일실수입_오늘까지
            print('장해기간일실수입총합계',장해기간일실수입총합계)

            호프만계수총합 = 장해기간총호프만합계 + 총입원호프만
            print('호프만계수총합 :', 호프만계수총합)

            print('===============19. 위자료 계산시작====================')
            위자료 = int(100000000 * 장해율 )
            print('위자료 :', 위자료)


            print('===============20. 최종정리====================')

            총일실수입 = 장해기간일실수입총합계 + 입원기간일실수입총합계


            print('입원기간일실수입총합계:',입원기간일실수입총합계)
            print('장해기간일실수입총합계:',장해기간일실수입총합계)
            print('총일실수입 : ',총일실수입)
            print('위자료 :', 위자료)




            print('===============21. 최종정리 과실적용====================')
            과실적용 = 1 - 내과실  # 과실적용

            입원기간일실수입총합계Last = 입원기간일실수입총합계 * 과실적용
            정년기간일실수입Last = (장해일실수입_오늘까지 + 장해기간일실수입_정년) * 과실적용
            가동기간일실수입Last = 장해기간일실수입_가동 * 과실적용
            총일실수입Last = 총일실수입 * 과실적용
            위자료Last = 위자료 * (1 - 내과실 * 0.6) #영구위자료
            가해자선지급Last = numb5 * 내과실 #20210130추가, 가해자선지급은 100*20%=20만원을 마이너스
            피해자선지급Last = numb6 * 과실적용 #20210130추가, 가해자선지급은 100*80%=80만원을 플러스
            손해배상합계Last = 총일실수입Last + 위자료Last + 피해자선지급Last - 가해자선지급Last

            입원기간일실수입총합계Last = format(int(입원기간일실수입총합계Last), ",")  #출력용
            정년기간일실수입Last = format(int(정년기간일실수입Last), ",")
            가동기간일실수입Last = format(int(가동기간일실수입Last), ",")
            총일실수입Last = format(int(총일실수입Last), ",")  #출력용
            위자료Last = format(int(위자료Last), ",")  #출력용
            가해자선지급Last = format(int(가해자선지급Last), ",")  #출력용
            피해자선지급Last = format(int(피해자선지급Last), ",")  #출력용
            손해배상합계Last = format(int(손해배상합계Last), ",")  #출력용


            print('입원기간일실수입총합계Last:',입원기간일실수입총합계Last)
            print('정년기간일실수입Last:',정년기간일실수입Last)
            print('가동기간일실수입Last:',가동기간일실수입Last)
            print('총일실수입Last :',총일실수입Last)
            print('위자료Last:',위자료Last)
            print('가해자선지급Last:',가해자선지급Last)
            print('피해자선지급Last:',피해자선지급Last)
            print('손해배상합계Last:',손해배상합계Last)



        else:
            print('==============================limit 장해===============================')
            print('======================10.오늘까지 장해기간(max 정년)===================')

            #for old man, 10번 11번 이 함수 추가.
            #오늘보다 정년이 더 짧은 분들은 연세가 매우 많으신 분들 위한 함수. 굳이 정년적용할 필요 없이 그냥 가동기간과 사고일 비교위해 이 함수 적용.
            if 오늘 > sixty_date:
              sixty_date = sixtyfive_date
            else:
              sixty_date = sixty_date
            print('sixty_date',sixty_date)


            #여기서부터는 정상.

            월별기간조회_오늘까지 = pd.date_range(acc_date, min(sixty_date,min(한시장해종료일, 오늘)), freq='1M')
            print('월별기간조회_오늘까지:', 월별기간조회_오늘까지)

            series_월별기간조회_오늘까지 = pd.Series(range(len(월별기간조회_오늘까지)), index=월별기간조회_오늘까지)
            print('series_월별기간조회_오늘까지:', series_월별기간조회_오늘까지)


            sum1 = 0
            monthList = []
            append = monthList.append
            월별기간조회_오늘까지 = 월별기간조회_오늘까지.strftime('%d')
            print('월별기간조회_오늘까지:', 월별기간조회_오늘까지)
            for i in 월별기간조회_오늘까지:
                sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
                #print('월별기간조회_오늘까지 sum:',sum1)
                append(i)
            for_월별장해기간조회 = sum1
            월말기준개월수 = len(월별기간조회_오늘까지)  # 10, int, 이수치가 실질적으로 호프만계수에 적용되는 부분. 개월수
            print('월말기준개월수:', 월말기준개월수)

            print('monthList', monthList)


            print('========11.오늘까지 장해기간(max 정년) 진정한 최대 개월수 구하기=============')

            #for old man, 10번 11번 이 함수 추가.
            #오늘보다 정년이 더 짧은 분들은 연세가 매우 많으신 분들 위한 함수. 굳이 정년적용할 필요 없이 그냥 가동기간과 사고일 비교위해 이 함수 적용.
            if 오늘 > sixty_date:
              sixty_date = sixtyfive_date
            else:
              sixty_date = sixty_date
            print('sixty_date',sixty_date)


            #여기서부터는 정상.
            #실제 일수 구하기
            LCL_days = max(0, ((min(sixty_date, min(한시장해종료일, 오늘)) - acc_date) // timedelta(days=1)) + 1)
            print('LCL_days:', LCL_days)  #1000 int

            실제장해일수와차이일수 = for_월별장해기간조회 - LCL_days
            print('실제장해일수와차이일수:', 실제장해일수와차이일수)  #0보다 크면 over된


            fullmonth_days = for_월별장해기간조회 - 실제장해일수와차이일수
            print('fullmonth_days',fullmonth_days)


            def hof_month_max_LCL():
                if LCL_days < for_월별입원기간조회 and fullmonth_days > LCL_days:
                    return 월말기준개월수 - 2  #
                elif LCL_days < for_월별입원기간조회 and fullmonth_days <= LCL_days:
                    return 월말기준개월수 - 1
                else:
                    return 월말기준개월수
            print('hof_month_max():', hof_month_max_LCL())


            print('==========================12.for문으로 호프만계수 구하기=======================')
            #저 위에서 다 정리하고 여기에 개월수 넣기.

            hofList_LCL=[] #호프만 계수
            append = hofList_LCL.append
            conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속  #sql db 접속
            db = conn.cursor()
            if hof_month_max_LCL() <= 0:
                hof_month_max_LCL() ==0
            else:
                for o in range(1,hof_month_max_LCL()+1):
                  setdata = (o , )  #변수로 검색위해
                  query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
                  hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
                  hoffman = float(hoffman[0])  # 튜플을 float으로 변환
                  append(hoffman)#조회된 월별기간 30,29,31 을 myList에 담기
                hoffman = min(hoffman, 240)
                print('hofList_LCL:',hofList_LCL) #hoffman 계수 구해서 리스트에 담기


            hof_m_List_LCL=[] #공제위한 계수 조회
            append = hof_m_List_LCL.append
            conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속  #sql db 접속
            db = conn.cursor()
            if hof_month_max_LCL() <= 0:
              hof_month_max_LCL() ==0
            else:
                for k in range(0,hof_month_max_LCL()):
                  setdata = (k , )  #변수로 검색위해
                  query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
                  hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
                  hoffman = float(hoffman[0])  # 튜플을 float으로 변환
                  append(hoffman)#조회된 월별기간 30,29,31 을 myList에 담기
                hoffman = min(hoffman, 240)
                print('hof_m_List_LCL:',hof_m_List_LCL) #hoffman 계수 구해서 리스트에 담기



            print('==========================14.도시일용=======================')

            conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
            #오늘기준 도시일용노임
            setdata = (오늘_str, )  #변수로 검색위해, 사고일.
            setdata = (setdata[0])  # 튜플을 str로 변환
            db = conn.cursor()
            query = db.execute("SELECT dosi_month from dosi where date=%s",[setdata])
            data3 = db.fetchone()
            dosi_today = (data3[0])  # 튜플을 변환
            dosi_today_p = format(dosi_today,",")
            print('오늘기준도시일용노임:', dosi_today)  #int, 3042000
            print('오늘기준도시일용노임 타입:', type(dosi_today))


            #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
            #+ pd.DateOffset(months=1) -> out of range error 방지
            한시장해종료65세비교후dosi = min(한시장해종료일+ pd.DateOffset(months=1), sixtyfive_date)
            print('퇴원일+ pd.DateOffset(days=입원시작일)',퇴원일+ pd.DateOffset(days=입원시작일))

            #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
            단순장해기간조회_dosi = pd.date_range(ad_acc_date, 한시장해종료65세비교후dosi, freq='M')
            단순장해기간개월수_dosi = len(단순장해기간조회_dosi)
            print('단순장해기간조회_dosi:', 단순장해기간조회_dosi)
            print('단순장해기간개월수_dosi:', 단순장해기간개월수_dosi)

            #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
            series_월별기간조회_오늘까지_dosi = pd.Series(range(len(단순장해기간조회_dosi)), index=단순장해기간조회_dosi)  #도시일용조회
            print('series_월별기간조회_오늘까지_dosi', series_월별기간조회_오늘까지_dosi)




            #index를 for문으로
            incomeList = []
            append = incomeList.append
            for x in series_월별기간조회_오늘까지_dosi:
                장해기준 = (series_월별기간조회_오늘까지_dosi.index[x]).strftime('%Y-%m-%d')
                print('장해기준', 장해기준)
                setdata = (장해기준, )  #변수로 검색위해, 사고일.
                setdata = (setdata[0])  # 튜플을 str로 변환
                query = db.execute("SELECT dosi_month from dosi where date=%s", [setdata])

                if 장해기준 > 오늘_str:  ##오늘보다 입원기준 날짜가 크면 도시일용노임을 오늘기준으로
                    data = (dosi_today, )
                else:
                    data = db.fetchone()

                dosi = (data[0])  # 튜플을 변환

                #입원기준이 60세 정년보다 크면 도시일용 적용.
                if 장해기준 > sixty_date_str:
                    income = dosi
                elif 장해기준 > sixtyfive_date_str:
                    income = 0
                else:
                    income = max(dosi, 월소득)  #도시일용과 월소득 중 높은 금액

                append(income)  #도시일용노임 리스트에 담기
            print('incomeList:', incomeList)



            print('==========================15.List calc=======================')

            #호프만끼리 공제
            hoffman_calc_LCL = []
            a3 = hofList_LCL
            a4 = hof_m_List_LCL

            for u in range(len(a3)):
                hoffman_calc_LCL.append(a3[u] - a4[u] )
            print(hoffman_calc_LCL)
            hoffman_LCL_today합계 = sum(hoffman_calc_LCL)  #오늘위해 수정,
            print('hoffman_LCL_today합계:', hoffman_LCL_today합계)

            #hoffman과 dosi 곱하기,
            ilsil_LCL = []
            a3 = hoffman_calc_LCL
            a4 = incomeList
            for i in range(len(a3)):
                ilsil_LCL.append(a3[i] * a4[i])
            print(ilsil_LCL)


            print('==================16.사고일~오늘까지 장해 합계================')
            오늘까지장해Hoffman = max(0, min(240, hoffman_LCL_today합계, 한시장해호프만) - 총입원호프만)
            print('오늘까지장해Hoffman:', 오늘까지장해Hoffman)

            장해일실수입_오늘까지 = max(0, sum(ilsil_LCL) - 입원기간일실수입총합계) * 장해율
            print('장해일실수입_오늘까지:', 장해일실수입_오늘까지)


            print('==================17.오늘이후 ~ 정년기간까지 합계=============')

            정년Hoffman = max(0,min(min(한시장해호프만, 240) - max(hoffman_LCL_today합계, 총입원호프만),min(한시장해호프만, 정년호프만) - max( hoffman_LCL_today합계, 총입원호프만)))
            print('오늘이후Hoffman:', 정년Hoffman)

            장해기간일실수입_정년 = max(월소득, dosi_today) * 정년Hoffman * 장해율
            print('장해기간일실수입_정년:', 장해기간일실수입_정년)


            print('==================18.정년 ~ 가동기간까지 합계=============')
            가동Hoffman = max(0,min(min(한시장해호프만,240) - max(정년호프만, hoffman_LCL_today합계, 총입원호프만),min(한시장해호프만,가동호프만) - max( 정년호프만, hoffman_LCL_today합계, 총입원호프만)))
            print('가동Hoffman:', 가동Hoffman)

            장해기간일실수입_가동 = dosi_today * 가동Hoffman * 장해율
            print('장해기간일실수입_가동:', 장해기간일실수입_가동)


            print('================19.장해기간 총 합계===============')
            장해기간총호프만합계 = 오늘까지장해Hoffman + 정년Hoffman + 가동Hoffman
            print('장해기간총호프만합계', 장해기간총호프만합계)

            장해기간일실수입총합계 = 장해기간일실수입_가동 + 장해기간일실수입_정년 + 장해일실수입_오늘까지
            print('장해기간일실수입총합계', 장해기간일실수입총합계)

            호프만계수총합 = 장해기간총호프만합계 + 총입원호프만
            print('호프만계수총합 :', 호프만계수총합)



            print('===============20. 위자료 계산시작====================')

            #sql wija.db접속. 위자료 한시결정위하여
            conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속  #sql db 접속
            db = conn.cursor()
            setdata = (장해기간, )  #변수로 검색위해
            query = db.execute("SELECT temp from wijaryo where year=%s", setdata)
            한시위자료기준 = db.fetchone()
            한시위자료기준 = float(한시위자료기준[0])  # 튜플을 float으로 변환
            print('한시위자료기준:', 한시위자료기준)


            위자료 = int(100000000 * 장해율 * 한시위자료기준)  #한시위자료
            print('위자료 :', 위자료)


            print('===============21. 최종정리====================')

            총일실수입 = 장해기간일실수입총합계 + 입원기간일실수입총합계

            print('입원기간일실수입총합계:', 입원기간일실수입총합계)
            print('장해기간일실수입총합계:', 장해기간일실수입총합계)
            print('총일실수입 : ', 총일실수입)
            print('위자료 :', 위자료)



            print('===============21. 최종정리 과실적용====================')
            과실적용 = 1 - 내과실  # 과실적용

            입원기간일실수입총합계Last = 입원기간일실수입총합계 * 과실적용
            정년기간일실수입Last = (장해일실수입_오늘까지 + 장해기간일실수입_정년) * 과실적용
            가동기간일실수입Last = 장해기간일실수입_가동 * 과실적용
            총일실수입Last = 총일실수입 * 과실적용
            위자료Last = 위자료 * (1 - 내과실 * 0.6)  #영구위자료
            가해자선지급Last = 0 * 내과실  #20210130추가, 가해자선지급은 100*20%=20만원을 마이너스
            피해자선지급Last = 0 * 과실적용  #20210130추가, 가해자선지급은 100*80%=80만원을 플러스
            손해배상합계Last = 총일실수입Last + 위자료Last + 피해자선지급Last - 가해자선지급Last

            입원기간일실수입총합계Last = format(int(입원기간일실수입총합계Last), ",")  #출력용
            정년기간일실수입Last = format(int(정년기간일실수입Last), ",")
            가동기간일실수입Last = format(int(가동기간일실수입Last), ",")
            총일실수입Last = format(int(총일실수입Last), ",")  #출력용
            위자료Last = format(int(위자료Last), ",")  #출력용
            가해자선지급Last = format(int(가해자선지급Last), ",")  #출력용
            피해자선지급Last = format(int(피해자선지급Last), ",")  #출력용
            손해배상합계Last = format(int(손해배상합계Last), ",")  #출력용

            print('입원기간일실수입총합계Last:', 입원기간일실수입총합계Last)
            print('정년기간일실수입Last:', 정년기간일실수입Last)
            print('가동기간일실수입Last:', 가동기간일실수입Last)
            print('총일실수입Last :', 총일실수입Last)
            print('위자료Last:', 위자료Last)
            print('가해자선지급Last:', 가해자선지급Last)
            print('피해자선지급Last:', 피해자선지급Last)
            print('손해배상합계Last:', 손해배상합계Last)




        fulfillmentText = '\n==========================\n📜위손사_BOT ver 1.0 \n==========================\n📜기초정보 및 보상금 평가근거\n========================== \n\n 1.날짜 및 나이 정보\n -사고당시 나이 : 만' + str(age) + '세 \n -사고일자 : ' + str(acc_date) + '\n -생년월일 : ' + str(birth) + '\n -정년(60세)종료일 :' + str(sixty_date) + '\n -가동기간(65세)종료일 :' + str(sixtyfive_date) + ' \n\n 2.기간 정보 \n -입원기간 : ' + str(numb1) + '일 \n -장해기간 :  x?년 \n\n 3.소득관련 정보 \n -월소득 : ' + str(월소득) + '원 \n -사고당시 도시일용노임 : ' + str(dosi_acc_p) + '원 \n -현재 도시일용노임 :' + str(dosi_today_p) + '원 \n\n 4.과실비율 및 장해율 \n -나의 과실비율 :' + str(numb2) + '% \n -나의장해율 : x?% \n\n 5.중간이자 및 생계비공제 정보 \n -입원호프만계수 :'+str(총입원호프만)+' \n  -장해기간호프만 :'+str(한시장해호프만)+'\n -정년호프만계수 : '+str(정년호프만)+' \n -가동호프만계수 : '+str(가동호프만)+'\n\n 6.위자료 기준 \n ※ 위자료는 나이, 직업 등 여러 요소를 참작하여 산정 \n\n\n==========================\n📜예상 보상금(한시장해) \n========================== \n\n 1️⃣일실수입(입원) : ' + str(입원기간일실수입총합계Last) + '원 \n 2️⃣일실수입(정년) :' + str( 정년기간일실수입Last) + '원 \n 3️⃣일실수입(가동기간) : ' + str(가동기간일실수입Last) + ' 원 \n----------------------------------------------------\n 4️⃣일실수입합계 : '+str(총일실수입Last)+'\n----------------------------------------------------\n 5️⃣위자료 :' + str(위자료Last) + '원\n 6️⃣피해자측 선지급 :'+str(피해자선지급Last)+'\n 7️⃣가해자측 선지급 : '+str(가해자선지급Last)+'\n----------------------------------------------------\n 8️⃣보상금 합계(4️⃣+5️⃣+6️⃣-7️⃣) :' + str(손해배상합계Last) + '원 \n\n\n 제일 처음으로 돌아가려면 채팅창에 "홈" 입력 또는  https://page.line.me/964ctcvt  <-링크클릭.\n\n\n [참고] \n-각 기간별 변동 도시일용노임 적용.\n -실제월소득과 도시일용노임 중 높은 소득을 적용. \n -정년이후로는 도시일용노임 적용.\n -중간이자 공제는 호프만계수 적용하며, 최대인정계수는 240H.'        #fulfillmentText = '\n==========================\n📜위손사_BOT ver 1.0 \n==========================\n📜기초정보 및 보상금 평가근거\n========================== \n\n 1.날짜 및 나이 정보\n -사고당시 나이 : 만' + str(age) + '세 \n -사고일자 : ' + str(acc_date) + '\n -생년월일 : ' + str(birth) + '\n -정년(60세)종료일 :' + str(sixty_date) + '\n -가동기간(65세)종료일 :' + str(sixtyfive_date) + ' \n\n 2.기간 정보 \n -입원기간 : ' + str(numb1) + '일 \n -장해기간 : '+str(한시장해종료일_str)+' \n\n 3.소득관련 정보 \n -월소득 : ' + str(월소득) + '원 \n -사고당시 도시일용노임 : ' + str(dosi_acc_p) + '원 \n -현재 도시일용노임 :' + str(dosi_today_p) + '원 \n -각 기간별 변동 도시일용노임 적용.\n -실제월소득과 도시일용노임 중 높은 소득을 적용. \n -정년이후로는 도시일용노임 적용.\n\n 4.과실비율 및 장해율 \n -나의 과실비율 :' + str(numb2) + '% \n -나의장해율 :' + str(percent) + '% \n\n 5.중간이자 및 생계비공제 정보 \n -입원호프만계수 :'+str(총입원호프만)+' \n  -장해기간호프만 :'+str(한시장해호프만)+'\n -정년호프만계수 : '+str(정년호프만)+' \n -가동호프만계수 : '+str(가동호프만)+'\n -중간이자 공제는 호프만계수를 적용합니다. \n -호프만계수는 최대240까지 적용. \n\n 6.위자료 기준 \n ※ 위자료는 나이, 직업 등 여러 요소를 참작하여 산정하게 됩니다. 이 챗봇에서 제시하는 위자료는 하나의 예시일 뿐 절대적인 금액이 아님을 알려드립니다.  \n\n\n==========================\n📜예상 보상금(한시장해) \n========================== \n\n 1️⃣일실수입(입원) : ' + str(입원기간일실수입총합계Last) + '원 \n 2️⃣일실수입(정년) :' + str( 정년기간일실수입Last) + '원 \n 3️⃣일실수입(가동기간) : ' + str(가동기간일실수입Last) + ' 원 \n---------------------------------------------\n 4️⃣일실수입합계 : '+str(총일실수입Last)+'\n---------------------------------------------\n 5️⃣위자료 :' + str(위자료Last) + '원\n 6️⃣피해자측 선지급 :'+str(피해자선지급Last)+'\n 7️⃣가해자측 선지급 : '+str(가해자선지급Last)+'\n---------------------------------------------\n 8️⃣보상금 합계(4️⃣+5️⃣+6️⃣-7️⃣) :' + str(손해배상합계Last) + '원 \n\n==========end=============\n\n\n 제일 처음으로 돌아가려면 채팅창에 "홈" 입력 또는  https://page.line.me/964ctcvt  <-링크클릭.'



        ########################################################################################
        ########################################################################################
        ########################################################################################
        ########################################################################################
        ########################################################################################




      #======교통사고 영구장해==============================================

    elif query_result.get('action') == 'permanent':
        #get data
        date1 = query_result.get('parameters').get('date')  #사고일
        date2 = query_result.get('parameters').get('date1')  #생년월일
        numb1 = int(query_result.get('parameters').get('number1'))  #입원기간
        numb2 = int(query_result.get('parameters').get('number2'))  #내과실비율
        numb3 = int(query_result.get('parameters').get('number3'))  #장해율
        numb4 = int(query_result.get('parameters').get('number4'))  #월소득
        numb5 = int(query_result.get('parameters').get('number5'))  #가해자선지급
        numb6 = int(query_result.get('parameters').get('number6'))  #피해자선지급


        print('date1 = {0}'.format(date1))
        print('date2 = {0}'.format(date2))
        print('num1 = {0}'.format(numb1))
        print('num2 = {0}'.format(numb2))
        print('num3 = {0}'.format(numb3))
        print('num4 = {0}'.format(numb4))


        생년월일 = date2
        내과실 = numb2 * 0.01
        장해율 = numb3 * 0.01
        월소득 = numb4


        print('===============날짜 구하기====================')

        #생년월일, 날짜str에서 datetime로 변환.
        dt = maya.parse(date2).datetime()
        print(dt)
        print('dt타입:', type(dt))
        #날짜만 구하기
        birth = datetime.date(dt)
        print('생년월일 :', birth)


        #사고일, 날짜str에서 datetime로 변환. 사고일에서 날짜 더하기 위함.
        accident_date = maya.parse(date1).datetime()
        print('사고일 :', accident_date)
        #날짜만 구하기(시분초 제외)
        acc_date = datetime.date(accident_date)
        print('사고일 날짜만추출:', acc_date)


        #사고당시 만나이 구하기(사고일-생년월일),  사고시점의 나이
        age = (acc_date - birth) // timedelta(days=365)  #나이로 계산 int. 출력용
        age_month = (acc_date - birth) // timedelta(365 / 12)  #사고당시 나이에 해당하는 총 일수를 월로 변환. 700개월 등
        print('age_month :', age_month)  #700개월 등, int
        print('사고일-생년월일 :', acc_date - birth)  #2020-01-01
        print('사고당시 만 나이:', age)  # 15, int


        #정년 종료일(60세 기준),
        sixty_date = datetime.date(birth + pd.DateOffset(years=60, days=-1))
        print('정년60세 종료일:', sixty_date)  #2020-01-01

        #정년 종료일(60세 기준) str
        sixty_date_str = sixty_date.strftime("%Y-%m-%d")
        print('sixty_date_str:', sixty_date_str)

        #가동 종료일(60세 기준),
        sixtyfive_date = datetime.date(birth + pd.DateOffset(years=65, days=-1))
        print('정년60세 종료일:', sixtyfive_date)  #2020-01-01

        #가동 종료일(60세 기준) str
        sixtyfive_date_str = sixtyfive_date.strftime("%Y-%m-%d")
        print('sixtyfive_date_str:', sixtyfive_date_str)


        print('===============입원기간 구하기-호프만계수 시작====================')

        #이제 퇴원일 구하기!, 퇴원일은 사고일에서 numb1을 더한 값
        퇴원일 = datetime.date(acc_date + pd.DateOffset(days=numb1-1)) #numb1은 입원기간
        print('퇴원일:',퇴원일)
        print('퇴원일 타입:',type(퇴원일))
        # 퇴원일_str = 퇴원일.strftime("%Y-%m-%d") #퇴원일을 str로 변환
        # print('퇴원일_str',퇴원일_str)
        # print('퇴원일_str 타입:',type(퇴원일_str))



        print('==========오늘날짜 구하기 ==========')

        #오늘날짜 구하기.
        오늘 = datetime.now()
        #날짜만 구하기(시분초 제외)
        오늘 = datetime.date(오늘)  #2020-01-01, datetime.date
        오늘_str = 오늘.strftime("%Y-%m-%d") #str로 변환
        print('오늘_str:',오늘_str)
        print('오늘_str type:',type(오늘_str))
        print('오늘:', 오늘)
        print('오늘 타입:', type(오늘))





        print('============!!!!입원기간반영위한 사고일조정!!!==============')
        #입원기간 호프만계수 버리기용도
        #도시일용은 다음달 계수로 반영. 그렇기 때문에 이걸 적용해야 함.
        #반대로 첫사고일 부터 한달채움 계산은 사고일을 기준!! 이거적용하면 안됨. 이것만 해결하면 될거 같은데 미치겠다 진짜 나좀 살려주라!!
        #입원기간에서 for월별입원기간조회하고 실제입원일수 계산할때만 한달채움을 사용.
        #입원만 반영해야 함.
        #최초 입원일이 1일이 아닌경우 입원계산에서 최초달을 버리기 위함.
        입원시작년 = int(acc_date.strftime('%Y'))  # 해당년도 뽑아내기
        입원시작월 = int(acc_date.strftime('%m'))  # 해당월 뽑아내기
        입원시작일 = int(acc_date.strftime('%d'))
        print('입원시작년,월,일',입원시작년,입원시작월,입원시작일)

        #사고일의다음달 구하기
        사고일다음달 = acc_date+ pd.DateOffset(months=1)
        print('사고일다음달:',사고일다음달)

        #사고일 다음달의 1일 구하기
        사고일다음달첫날 = datetime.date(사고일다음달.replace(day=1))
        print('date first:',사고일다음달첫날)
        print('date first:',type(사고일다음달첫날))

        if 입원시작일 ==1: #입원시작일이 1일이면 그대로, 2일부터면 버리기.
          ad_acc_date = acc_date
        else:
          ad_acc_date = 사고일다음달첫날
        print('ad_acc_date:',ad_acc_date)
        print('ad_acc_date:',type(ad_acc_date))

        #사고일의 다음달 날짜가 사고월의 총일수와 동일하게 되는 경우. 1달로 인식하도록.


        print('===============정년기간개월수 및 실제일수==============')
        #호프만계수
        단순정년기간조회 = pd.date_range(acc_date,sixty_date, freq='1m') # 생일~가동기간까지 1달씩
        단순정년기간개월수 = len(단순정년기간조회)
        print('단순정년기간조회:', 단순정년기간조회)
        print('단순정년기간개월수:',단순정년기간개월수)


        #정년기간 실제일수 구하기, 정확한 계산위해. 실제일수가 더 큰 경우는 없음.
        실제정년일수 =((sixty_date- acc_date) // timedelta( days=1)+1)
        print('실제정년_days:',실제정년일수) #1000 int , 오늘적용위해 수정.


        sum1=0
        monthList=[]
        append = monthList.append #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        정년기간개월수_for = 단순정년기간조회.strftime('%d') #for문 적용 위함.
        for i in 정년기간개월수_for:
          sum1 += int(i) #정해진 기간의 월말 일수 모두 더하기
          append(i)
        for_조회정년일수 = sum1
        print('for_조회정년일수:',for_조회정년일수)

        실제정년일수와차이일수 = for_조회정년일수-실제정년일수
        print('실제정년일수와차이일수:',실제정년일수와차이일수) #0보다 크면 over된 수치.

        #아래 정년기간개월수()함수에 정년기간비교해서 정년마지막일보다도 더 크면 2개월을 공제해야함.
        #실제정년일수보다 for_조회정년일수가 0보다도 크면 무조건 1은 빼줘야 함.
        정년마지막년 = int(sixty_date.strftime('%Y')) # 정년마지막기간 해당년도 뽑아내기
        정년마지막월 = int(sixty_date.strftime('%m')) # 정년마지막기간 해당월 뽑아내기
        정년마지막월_말일 = calendar.monthrange(정년마지막년, 정년마지막월)[1]
        print('정년마지막월_말일:',정년마지막월_말일)

        #단순개월수조회가 2개월 이상 over되는 경우때문에 이 함수 사용.
        def 정년기간개월수():
          if 실제정년일수 < for_조회정년일수 and 실제정년일수와차이일수 > 정년마지막월_말일:
            return 단순정년기간개월수 -2 #
          elif 실제정년일수 < for_조회정년일수 and 실제정년일수와차이일수 <= 정년마지막월_말일:
            return 단순정년기간개월수 -1 #여기를 수정. 끼리낄 마이너스해서 남은일수 나누기 30.4166으로 나눈값을 마이너스.
          else:
            return 단순정년기간개월수
        print('정년기간개월수():',정년기간개월수())

        print('===============가동기간개월수 및 실제일수==============')
        #호프만계수
        단순가동기간조회 = pd.date_range(acc_date,sixtyfive_date, freq='1m') # 생일~가동기간까지 1달씩
        단순가동기간개월수 = len(단순가동기간조회)
        print('단순가동기간조회:', 단순가동기간조회)
        print('단순가동기간개월수:',단순가동기간개월수)


        #가동기간 실제일수 구하기, 정확한 계산위해. 실제일수가 더 큰 경우는 없음.
        실제가동일수 =((sixtyfive_date- acc_date) // timedelta( days=1)+1)
        print('실제가동_days:',실제가동일수) #1000 int , 오늘적용위해 수정.


        sum1=0
        monthList=[]
        append = monthList.append #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        가동기간개월수_for = 단순가동기간조회.strftime('%d') #for문 적용 위함.
        for i in 가동기간개월수_for:
          sum1 += int(i) #정해진 기간의 월말 일수 모두 더하기
          append(i)
        for_조회가동일수 = sum1
        print('for_조회정년일수:',for_조회가동일수)

        실제가동일수와차이일수 = for_조회가동일수-실제가동일수
        print('실제가동일수와차이일수:',실제가동일수와차이일수) #0보다 크면 over된 수치.

        #아래 가동기간개월수()함수에 가동기간비교해서 가동마지막일보다도 더 크면 2개월을 공제해야함.
        #실제가동일수보다 for_조회가동일수가 0보다도 크면 무조건 1은 빼줘야 함.
        가동마지막년 = int(sixtyfive_date.strftime('%Y')) # 가동마지막기간 해당년도 뽑아내기
        가동마지막월 = int(sixtyfive_date.strftime('%m')) # 정년마지막기간 해당월 뽑아내기
        가동마지막월_말일 = calendar.monthrange(가동마지막년, 가동마지막월)[1]
        print('가동마지막월_말일:',가동마지막월_말일)

        def 가동기간개월수():
          if 실제가동일수 < for_조회가동일수 and 실제가동일수와차이일수 > 가동마지막월_말일:
            return 단순가동기간개월수 -2 #
          elif 실제가동일수 < for_조회가동일수 and 실제가동일수와차이일수 <= 가동마지막월_말일:
            return 단순가동기간개월수 -1
          else:
            return 단순가동기간개월수
        print('가동기간개월수():',가동기간개월수())


        print('===============대표적호프만계수===================')

        #정년(60세) 호프만, hoffman sql data 불러오기
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        db = conn.cursor()
        setdata = (max(0,정년기간개월수()), )  #변수로 검색위해
        query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
        data4 = db.fetchone()
        data4 = (data4[0])  # 튜플을 float으로 변환
        정년호프만 = data4
        print('정년 호프만 타입:', type(data4))
        print('정년기간 호프만:', data4)



        #가동기간(65세) 호프만, hoffman sql data 불러오기
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        db = conn.cursor()
        setdata = (max(0,가동기간개월수()), )  #변수로 검색위해
        query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
        data5 = db.fetchone()
        data5 = (data5[0])  # 튜플을 float으로 변환
        가동호프만 = data5
        print('가동기간 타입:', type(data5))
        print('가동기간 호프만:', data5)

        #=========================================================



        print('==============================입원기간===============================')
        print('================1. 퇴원일까지 월별 말일 조회!!!!!오늘까지==============')

        #월별기간조회해서 총합구하고 나눠서 개월수 구하는 매우 중요한 용도!!!!!진심 중요
        퇴원일65세비교후 = min(퇴원일, sixtyfive_date)  # 여기서 퇴원일은 65세와 비교해서 적용해야 함. 단순조회.


        단순입원기간조회 = pd.date_range(acc_date,퇴원일65세비교후, freq='1M') #
        단순입원기간개월수 = len(단순입원기간조회)
        print('단순입원기간조회:', 단순입원기간조회)
        print('단순입원기간개월수:', 단순입원기간개월수)

        series_월별기간조회 = pd.Series(range(len(단순입원기간조회)), index=단순입원기간조회) #도시일용조회
        print('series_월별기간조회',series_월별기간조회)

        #실제 일수 구하기
        admission_days =max(0, ((퇴원일65세비교후 - acc_date) // timedelta( days=1))+1)
        print('admission_days:',admission_days) #1000 int , 오늘적용위해 수정.

        입원기간개월수_for = 단순입원기간조회.strftime('%d') #for문 적용 위함.


        sum1=0
        monthList=[]
        append = monthList.append #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        for i in 입원기간개월수_for:
          sum1 += int(i) #정해진 기간의 월말 일수 모두 더하기
          append(i)
        for_월별입원기간조회 = sum1
        print('for_월별입원기간조회:',sum1)
        print('monthList',monthList)


        실제입원일수와차이일수 = for_월별입원기간조회 - admission_days
        print('실제입원일수와차이일수:',실제입원일수와차이일수) #0보다 크면 over된 수치.

        fullmonth_days = for_월별입원기간조회 - 실제입원일수와차이일수
        print('fullmonth_days',fullmonth_days)



        def 입원기간개월수():
            if admission_days < for_월별입원기간조회 and fullmonth_days > admission_days:
                return 단순입원기간개월수 - 2  #
            elif admission_days < for_월별입원기간조회 and fullmonth_days <= admission_days:
                return 단순입원기간개월수 - 1
            else:
                return 단순입원기간개월수


        print('입원기간개월수():', 입원기간개월수())



        print('====================2.총입원호프만계수 구하기===================')

        #입원 총 호프만계수 구하기
        setdata = (입원기간개월수(), ) #오늘적용위해 수정
        print('setdata:',setdata)
        query = db.execute("SELECT hoffman from hoff where year=%s",setdata)
        hoffman_data = db.fetchone()
        hoffman_data = float(hoffman_data[0])  # 튜플을 float으로 변환
        총입원호프만 = min(240,hoffman_data)
        print('총입원기간 호프만:', hoffman_data)  #0.995850622




        print('==================3. 오늘까지 진정한 최대 개월수 구하기================')

        단순입원기간조회_오늘까지 = pd.date_range(acc_date,min(오늘,퇴원일65세비교후), freq='1M') #
        print('단순입원기간조회:', 단순입원기간조회)

        단순입원기간개월수_오늘까지 = len(단순입원기간조회_오늘까지)
        print('단순입원기간개월수_오늘까지:', 단순입원기간개월수_오늘까지)

        #오늘까지 실제 일수 구하기
        admission_days =max(0,((min(오늘,퇴원일65세비교후)- acc_date) // timedelta( days=1))+1)
        print('admission_days:',admission_days) #1000 int , 오늘적용위해 수정.



        sum1=0
        monthList=[]
        append = monthList.append #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        입원기간개월수_for_오늘까지 = 단순입원기간조회_오늘까지.strftime('%d') #for문 적용 위함.
        for i in 입원기간개월수_for_오늘까지:
          sum1 += int(i) #정해진 기간의 월말 일수 모두 더하기
          append(i)
        for_월별입원기간조회_오늘까지 = sum1
        print('for_월별입원기간조회_오늘까지:',sum1)
        print('monthList',monthList)


        실제입원일수와차이일수_오늘까지 = for_월별입원기간조회_오늘까지 - admission_days
        print('실제입원일수와차이일수:',실제입원일수와차이일수) #0보다 크면 over된 수치.

        fullmonth_days = for_월별입원기간조회 - 실제입원일수와차이일수_오늘까지
        print('fullmonth_days:',fullmonth_days)


        #오늘까지 총 입원개월수 선정
        def 입원기간개월수_오늘까지():
            if admission_days < for_월별입원기간조회_오늘까지 and fullmonth_days > admission_days:
                return 단순입원기간개월수_오늘까지 - 2  #
            elif admission_days < for_월별입원기간조회_오늘까지 and fullmonth_days <= admission_days:
                return 단순입원기간개월수_오늘까지 - 1
            else:
                return 단순입원기간개월수_오늘까지


        print('입원기간개월수_오늘까지():', 입원기간개월수_오늘까지())


        print('================4.for문으로 오늘까지 호프만계수 구하기==================')
        #저 위에서 다 정리하고 여기에 개월수 넣기.

        hofList=[] #호프만 계수
        append = hofList.append#아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속 #프로그램 전체 접속 구문%s
        db = conn.cursor()
        if 입원기간개월수_오늘까지() ==0:
          입원기간개월수_오늘까지() ==0
        else:
          for o in range(1,입원기간개월수_오늘까지()+1):
            setdata = (o , )  #변수로 검색위해
            query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
            hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
            hoffman = float(hoffman[0])  # 튜플을 float으로 변환
            append(hoffman)
          hoffman = min(hoffman, 240)
        print('hofList:',hofList) #hoffman 계수 구해서 리스트에 담기


        hof_m_List=[] #공제위한 계수 조회
        append = hof_m_List.append#아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        if 입원기간개월수_오늘까지() ==0:
          입원기간개월수_오늘까지() ==0
        else:
          for k in range(0,입원기간개월수_오늘까지()):
            setdata = (k , )  #변수로 검색위해
            query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
            hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
            hoffman = float(hoffman[0])  # 튜플을 float으로 변환
            append(hoffman)
          hoffman = min(hoffman, 240)
        print('hof_m_List:',hof_m_List) #hoffman 계수 구해서 리스트에 담기





        print('==========================5.도시일용=======================')

        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        #오늘기준 도시일용노임
        setdata = (오늘_str, )  #변수로 검색위해, 사고일.
        setdata = (setdata[0])  # 튜플을 str로 변환
        db = conn.cursor()
        query = db.execute("SELECT dosi_month from dosi where date=%s",[setdata])
        data = db.fetchone()
        dosi_today = (data[0])  # 튜플을 변환
        dosi_today_p = format(dosi_today,",")
        print('오늘기준도시일용노임:', dosi_today)  #int, 3042000


        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        #사고일기준 도시일용노임
        setdata = (acc_date, )  #변수로 검색위해, 사고일.
        setdata = (setdata[0])  # 튜플을 str로 변환
        db = conn.cursor()
        query = db.execute("SELECT dosi_month from dosi where date=%s",[setdata])
        data = db.fetchone()
        dosi_acc = float(data[0])  # 튜플을 변환
        dosi_acc_p = format(dosi_acc,",")
        print('사고일기준도시일용노임:', dosi_acc)  #int, 3042000

        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        퇴원일65세비교후dosi = min(퇴원일+ pd.DateOffset(months=1), sixtyfive_date)
        print('퇴원일+ pd.DateOffset(days=입원시작일)',퇴원일+ pd.DateOffset(days=입원시작일))

        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        단순입원기간조회_dosi = pd.date_range(ad_acc_date, 퇴원일65세비교후dosi, freq='M')
        단순입원기간개월수_dosi = len(단순입원기간조회_dosi)
        print('단순입원기간조회_dosi:', 단순입원기간조회_dosi)
        print('단순입원기간개월수_dosi:', 단순입원기간개월수_dosi)

        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        series_월별기간조회_dosi = pd.Series(range(len(단순입원기간조회_dosi)), index=단순입원기간조회_dosi)  #도시일용조회
        print('series_월별기간조회_dosi', series_월별기간조회_dosi)



        #index를 for문으로

        incomeList=[]
        append = incomeList.append
        for x in series_월별기간조회_dosi:
          입원기준 = (series_월별기간조회_dosi.index[x]).strftime('%Y-%m-%d')
          print('입원기준',입원기준)
          ##오늘보다 입원기준 날짜가 크면 도시일용노임을 오늘기준으로
          setdata = (입원기준, )  #변수로 검색위해, 사고일.
          setdata = (setdata[0])  # 튜플을 str로 변환
          query = db.execute("SELECT dosi_month from dosi where date=%s",[setdata])

          if 입원기준>오늘_str:
            data = (dosi_today,)
          else:
            data = db.fetchone()

          dosi = (data[0])  # 튜플을 변환

          #입원기준이 60세 정년보다 크면 도시일용 적용.
          if 입원기준 > sixty_date_str:
            income = dosi
          elif 입원기준 > sixtyfive_date_str:
            income = 0
          else:
            income = max(dosi,월소득) #도시일용과 월소득 중 높은 금액
          append(income) #도시일용노임 리스트에 담기
        print('incomeList:',incomeList)





        print('==========================6.오늘까지 List calc=======================')

        #호프만끼리 공제
        hoffman_calc=[]
        a1 = hofList
        a2 = hof_m_List

        for w in range(len(a1)):
          hoffman_calc.append(a1[w]-a2[w])
        print(hoffman_calc)
        hoffman_today합계 = sum(hoffman_calc) #오늘위해 수정
        print('hoffman_calc합계:',hoffman_today합계)

        #hoffman과 dosi 곱하기,
        ilsil_admission = []
        b1 = hoffman_calc
        b2 = incomeList
        for i in range(len(b1)):
            ilsil_admission.append(b1[i] * b2[i])
        print('ilsil_admission',ilsil_admission)

        print('===============7.사고일~오늘까지 입원합계===================')
        #ilsil 안의 값 모두 더하기. 그러면 일실수입 합계 구해짐
        입원기간일실수입_오늘까지=sum(ilsil_admission)
        print('입원기간일실수입_오늘까지:',입원기간일실수입_오늘까지)

        print('==================8.오늘이후~퇴원까지 입원합계===============')
        #총입원호프만이 0인경우 오류방지 위함.
        if 총입원호프만 == 0:
            income =0
        else:
            income = income
        print('income',income)

        #오늘이후 정년까지 호프만계수 산정, 정년이후 퇴원까지 호프만계수 산정
        #총입원호프만이 정년호프만보다 큰 경우 정년기간이후 가동기간까지는 도시일용.
        #총입원호프만이 정년호프만보다 작은 경우 예전 그대로.
        #장해쪽은 이미 모든게 적용되서 필요 없고, 입원의 경우 오늘날짜보다 정년이 긴 경우 정상적인 계산이 되지 않는 관계로 이 if함수를 적용하게됨.
        if 총입원호프만 <= 정년호프만:
          오늘이후Hoffman = 총입원호프만 - hoffman_today합계
          입원기간일실수입_오늘이후 = income * 오늘이후Hoffman
          print('오늘이후Hoffman:', 오늘이후Hoffman)
          print('입원기간일실수입_오늘이후:', 입원기간일실수입_오늘이후)

        elif 총입원호프만 > 정년호프만:
          오늘이후정년까지Hoffman = max(정년호프만,hoffman_today합계) - hoffman_today합계
          오늘정년이후가동까지Hoffman = max(0, min(가동호프만, 총입원호프만) -  max(정년호프만,hoffman_today합계))
          오늘이후Hoffman = 오늘이후정년까지Hoffman + 오늘정년이후가동까지Hoffman
          print('오늘이후정년까지Hoffman:', 오늘이후정년까지Hoffman)
          print('오늘정년이후가동까지Hoffman:', 오늘정년이후가동까지Hoffman)
          print('오늘이후Hoffman:', 오늘이후Hoffman)

          입원기간일실수입_오늘이후 = (월소득 * 오늘이후정년까지Hoffman) + (dosi_today * 오늘정년이후가동까지Hoffman)
          print('입원기간일실수입_오늘이후:', 입원기간일실수입_오늘이후)

        print('================9.입원기간일실수입 총합계====================')
        입원기간일실수입총합계 = 입원기간일실수입_오늘이후 + 입원기간일실수입_오늘까지
        print('입원기간일실수입총합계',입원기간일실수입총합계)
        print('입원기간 총호프만계수:',오늘이후Hoffman+hoffman_today합계)




        print('==============================후유잘해===============================')
        print('======================10.오늘까지 장해기간(max 정년)===================')

        #for old man, 10번 11번 이 함수 추가.
        #오늘보다 정년이 더 짧은 분들은 연세가 매우 많으신 분들 위한 함수. 굳이 정년적용할 필요 없이 그냥 가동기간과 사고일 비교위해 이 함수 적용.
        if 오늘 > sixty_date:
          sixty_date = sixtyfive_date
        else:
          sixty_date = sixty_date
        print('sixty_date',sixty_date)


        #여기서부터는 정상.

        월별기간조회_오늘까지 = pd.date_range(ad_acc_date,min(sixty_date,오늘), freq='1M')
        print('월별기간조회_오늘까지:', 월별기간조회_오늘까지)

        series_월별기간조회_오늘까지 = pd.Series(range(len(월별기간조회_오늘까지)), index=월별기간조회_오늘까지)
        print('series_월별기간조회_오늘까지:',series_월별기간조회_오늘까지)


        월별기간조회_오늘까지 = 월별기간조회_오늘까지.strftime('%d')
        print('월별기간조회_오늘까지:',월별기간조회_오늘까지)

        sum1=0
        monthList=[]
        append = monthList.append
        for i in 월별기간조회_오늘까지:
          sum1 += int(i) #정해진 기간의 월말 일수 모두 더하기
          #print('월별기간조회_오늘까지 sum:',sum1)
          append(i)
        for_월별장해기간조회 = sum1
        월말기준개월수 = len(월별기간조회_오늘까지) # 10, int, 이수치가 실질적으로 호프만계수에 적용되는 부분. 개월수
        print('월말기준개월수:',월말기준개월수)


        print('monthList',monthList)


        print('========11.오늘까지 장해기간(max 정년) 진정한 최대 개월수 구하기=============')

        #for old man, 10번 11번 이 함수 추가.
        #오늘보다 정년이 더 짧은 분들은 연세가 매우 많으신 분들 위한 함수. 굳이 정년적용할 필요 없이 그냥 가동기간과 사고일 비교위해 이 함수 적용.
        if 오늘 > sixty_date:
          sixty_date = sixtyfive_date
        else:
          sixty_date = sixty_date
        print('sixty_date',sixty_date)


        #여기서부터는 정상.
        #실제 일수 구하기
        LCL_days =max(0,((min(sixty_date,오늘)- ad_acc_date) // timedelta( days=1))+1)
        print('admission_days:',LCL_days) #1000 int

        실제장해일수와차이일수 = for_월별장해기간조회 - LCL_days
        print('실제장해일수와차이일수:', 실제장해일수와차이일수)  #0보다 크면 over된

        fullmonth_days = for_월별장해기간조회 - 실제장해일수와차이일수
        print('fullmonth_days',fullmonth_days)


        def hof_month_max_LCL():
            if LCL_days < for_월별입원기간조회 and fullmonth_days > LCL_days:
                return 월말기준개월수 - 2  #
            elif LCL_days < for_월별입원기간조회 and fullmonth_days <= LCL_days:
                return 월말기준개월수 - 1
            else:
                return 월말기준개월수
        print('hof_month_max():', hof_month_max_LCL())


        print('========12.오늘까지 장해 for문으로 호프만계수 구하기=========')
        #저 위에서 다 정리하고 여기에 개월수 넣기.

        hofList_LCL=[] #호프만 계수
        append = hofList_LCL.append
        if hof_month_max_LCL() <= 0: #0보다 작은경우 0으로 표시해서 오류 없애기
          hof_month_max_LCL() ==0
        else:
          for o in range(1,hof_month_max_LCL()+1):

            conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
            db = conn.cursor()
            setdata = (o , )  #변수로 검색위해
            query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
            hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
            hoffman = float(hoffman[0])  # 튜플을 float으로 변환
            append(hoffman)#조회된 월별기간 30,29,31 을 myList에 담기
          hoffman = min(hoffman, 240)
          print('hofList_LCL:',hofList_LCL) #hoffman 계수 구해서 리스트에 담기


        hof_m_List_LCL=[] #공제위한 계수 조회
        append = hof_m_List_LCL.append
        if hof_month_max_LCL() <= 0:
          hof_month_max_LCL() ==0
        else:
          for k in range(0,hof_month_max_LCL()):

            conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
            db = conn.cursor()
            setdata = (k , )  #변수로 검색위해
            query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
            hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
            hoffman = float(hoffman[0])  # 튜플을 float으로 변환
            append(hoffman)#조회된 월별기간 30,29,31 을 myList에 담기
          hoffman = min(hoffman, 240)
          print('hof_m_List_LCL:',hof_m_List_LCL) #hoffman 계수 구해서 리스트에 담기


        print('==========================13.도시일용=======================')

        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        #오늘기준 도시일용노임
        setdata = (오늘_str, )  #변수로 검색위해, 사고일.
        setdata = (setdata[0])  # 튜플을 str로 변환
        db = conn.cursor()
        query = db.execute("SELECT dosi_month from dosi where date=%s",[setdata])
        data3 = db.fetchone()
        dosi_today = (data3[0])  # 튜플을 변환
        dosi_today_p = format(dosi_today,",")
        print('오늘기준도시일용노임:', dosi_today)  #int, 3042000
        print('오늘기준도시일용노임 타입:', type(dosi_today))



        #index를 for문으로
        incomeList=[]
        append = incomeList.append
        for x in series_월별기간조회_오늘까지:
          장해기준 = (series_월별기간조회_오늘까지.index[x]).strftime('%Y-%m-%d')
          print('장해기준',장해기준)
          setdata = (장해기준, )  #변수로 검색위해, 사고일.
          setdata = (setdata[0])  # 튜플을 str로 변환
          query = db.execute("SELECT dosi_month from dosi where date=%s",[setdata])


          if 장해기준 > 오늘_str:##오늘보다 입원기준 날짜가 크면 도시일용노임을 오늘기준으로
            data = (dosi_today,)
          else:
            data = db.fetchone()

          dosi = (data[0])  # 튜플을 변환


          #입원기준이 60세 정년보다 크면 도시일용 적용.
          if 장해기준 > sixty_date_str:
            income = dosi
          elif 장해기준 > sixtyfive_date_str:
            income = 0
          else:
            income = max(dosi,월소득) #도시일용과 월소득 중 높은 금액

          append(income) #도시일용노임 리스트에 담기
        print('incomeList:',incomeList)



        print('==========================14.List calc=======================')

        #호프만끼리 공제
        hoffman_calc_LCL=[]
        a3 = hofList_LCL
        a4 = hof_m_List_LCL

        for u in range(len(a3)):
          hoffman_calc_LCL.append(a3[u]-a4[u])
        print(hoffman_calc_LCL)
        hoffman_LCL_today합계 = sum(hoffman_calc_LCL) #오늘위해 수정,
        print('hoffman_LCL_today합계:',hoffman_LCL_today합계)

        #hoffman과 dosi 곱하기,
        ilsil_LCL = []
        a3 = hoffman_calc_LCL
        a4 = incomeList
        for i in range(len(a3)):
            ilsil_LCL.append(a3[i] * a4[i])
        print(ilsil_LCL)


        print('==================15.사고일~오늘까지 장해 합계================')
        오늘까지장해Hoffman = max(0, min(240 - 총입원호프만, hoffman_LCL_today합계 - 총입원호프만))
        print('오늘까지장해Hoffman:',오늘까지장해Hoffman)

        장해일실수입_오늘까지=max(0, sum(ilsil_LCL) - 입원기간일실수입총합계) * 장해율
        print('장해일실수입_오늘까지:',장해일실수입_오늘까지)

        print('==================16.오늘이후 ~ 정년기간까지 합계=============')
        정년Hoffman = max(0, min(240 - max(hoffman_LCL_today합계,총입원호프만), 정년호프만 - max(hoffman_LCL_today합계,총입원호프만)))
        print('오늘이후Hoffman:',정년Hoffman)

        장해기간일실수입_정년 = max(월소득,dosi_today) * 정년Hoffman * 장해율
        print('장해기간일실수입_정년:',장해기간일실수입_정년)


        print('==================17.정년 ~ 가동기간까지 합계=============')
        가동Hoffman = max(0, min(240 - max(정년호프만, hoffman_LCL_today합계, 총입원호프만) , 가동호프만 - max(정년호프만, hoffman_LCL_today합계, 총입원호프만)))
        print('가동Hoffman:',가동Hoffman)

        장해기간일실수입_가동 = dosi_today * 가동Hoffman * 장해율
        print('장해기간일실수입_가동:',장해기간일실수입_가동)



        print('================18.장해기간 총 합계===============')
        장해기간총호프만합계 = 오늘까지장해Hoffman + 정년Hoffman + 가동Hoffman
        print('장해기간총호프만합계',장해기간총호프만합계)

        장해기간일실수입총합계 = 장해기간일실수입_가동 + 장해기간일실수입_정년 + 장해일실수입_오늘까지
        print('장해기간일실수입총합계',장해기간일실수입총합계)

        호프만계수총합 = 장해기간총호프만합계 + 총입원호프만
        print('호프만계수총합 :', 호프만계수총합)

        print('===============19. 위자료 계산시작====================')
        위자료 = int(100000000 * 장해율 )
        print('위자료 :', 위자료)


        print('===============20. 최종정리====================')

        총일실수입 = 장해기간일실수입총합계 + 입원기간일실수입총합계


        print('입원기간일실수입총합계:',입원기간일실수입총합계)
        print('장해기간일실수입총합계:',장해기간일실수입총합계)
        print('총일실수입 : ',총일실수입)
        print('위자료 :', 위자료)




        print('===============21. 최종정리 과실적용====================')
        과실적용 = 1 - 내과실  # 과실적용

        입원기간일실수입총합계Last = 입원기간일실수입총합계 * 과실적용
        정년기간일실수입Last = (장해일실수입_오늘까지 + 장해기간일실수입_정년) * 과실적용
        가동기간일실수입Last = 장해기간일실수입_가동 * 과실적용
        총일실수입Last = 총일실수입 * 과실적용
        위자료Last = 위자료 * (1 - 내과실 * 0.6) #영구위자료
        가해자선지급Last = numb5 * 내과실 #20210130추가, 가해자선지급은 100*20%=20만원을 마이너스
        피해자선지급Last = numb6 * 과실적용 #20210130추가, 가해자선지급은 100*80%=80만원을 플러스
        손해배상합계Last = 총일실수입Last + 위자료Last + 피해자선지급Last - 가해자선지급Last

        입원기간일실수입총합계Last = format(int(입원기간일실수입총합계Last), ",")  #출력용
        정년기간일실수입Last = format(int(정년기간일실수입Last), ",")
        가동기간일실수입Last = format(int(가동기간일실수입Last), ",")
        총일실수입Last = format(int(총일실수입Last), ",")  #출력용
        위자료Last = format(int(위자료Last), ",")  #출력용
        가해자선지급Last = format(int(가해자선지급Last), ",")  #출력용
        피해자선지급Last = format(int(피해자선지급Last), ",")  #출력용
        손해배상합계Last = format(int(손해배상합계Last), ",")  #출력용


        print('입원기간일실수입총합계Last:',입원기간일실수입총합계Last)
        print('정년기간일실수입Last:',정년기간일실수입Last)
        print('가동기간일실수입Last:',가동기간일실수입Last)
        print('총일실수입Last :',총일실수입Last)
        print('위자료Last:',위자료Last)
        print('가해자선지급Last:',가해자선지급Last)
        print('피해자선지급Last:',피해자선지급Last)
        print('손해배상합계Last:',손해배상합계Last)





        fulfillmentText = '\n==========================\n📜위손사_BOT ver 1.0 \n==========================\n📜기초정보 및 보상금 평가근거\n========================== \n\n 1.날짜 및 나이 정보\n -사고당시 나이 : 만' + str(age) + '세 \n -사고일자 : ' + str(acc_date) + '\n -생년월일 : ' + str(birth) + '\n -정년(60세)종료일 :' + str(sixty_date) + '\n -가동기간(65세)종료일 :' + str(sixtyfive_date) + ' \n\n 2.기간 정보 \n -입원기간 : ' + str(numb1) + '일 \n -장해기간 : 영구 \n\n 3.소득관련 정보 \n -월소득 : ' + str(월소득) + '원 \n -사고당시 도시일용노임 : ' + str(dosi_acc_p) + '원 \n -현재 도시일용노임 :' + str(dosi_today_p) + '원 \n\n 4.과실비율 및 장해율 \n -나의 과실비율 :' + str(numb2) + '% \n -나의장해율 :' + str(numb3) + '% \n\n 5.중간이자 및 생계비공제 정보 \n -입원호프만계수 :'+str(총입원호프만)+' \n -정년호프만계수 : '+str(정년호프만)+' \n -가동호프만계수 : '+str(가동호프만)+'\n\n 6.위자료 기준 \n ※ 위자료는 나이, 직업 등 여러 요소를 참작하여 산정.\n\n\n==========================\n📜예상 보상금 \n========================== \n\n 1️⃣일실수입(입원) : ' + str(입원기간일실수입총합계Last) + '원 \n 2️⃣일실수입(정년) :' + str( 정년기간일실수입Last) + '원 \n 3️⃣일실수입(가동기간) : ' + str(가동기간일실수입Last) + ' 원 \n----------------------------------------------------\n 4️⃣일실수입합계 : '+str(총일실수입Last)+'\n----------------------------------------------------\n 5️⃣위자료 :' + str(위자료Last) + '원\n 6️⃣피해자측 선지급 :'+str(피해자선지급Last)+'\n 7️⃣가해자측 선지급 : '+str(가해자선지급Last)+'\n----------------------------------------------------\n 8️⃣보상금 합계(4️⃣+5️⃣+6️⃣-7️⃣) :' + str(손해배상합계Last) + '원 \n\n\n 제일 처음으로 돌아가려면 채팅창에 "홈" 입력 또는  https://page.line.me/964ctcvt  <-링크클릭.\n\n\n [참고] \n-각 기간별 변동 도시일용노임 적용.\n -실제월소득과 도시일용노임 중 높은 소득을 적용. \n -정년이후로는 도시일용노임 적용.\n -중간이자 공제는 호프만계수 적용하며, 최대인정계수는 240H.'




########################################################################################
########################################################################################
########################################################################################
########################################################################################
########################################################################################



#=========교통사고 사망==================================================================


    elif query_result.get('action') == 'death':
        #get data
        date1 = query_result.get('parameters').get('date')  #사고일
        date2 = query_result.get('parameters').get('date1')  #생년월일
        numb1 = int(query_result.get('parameters').get('number1'))  #입원기간
        numb2 = int(query_result.get('parameters').get('number2'))  #월소득
        numb3 = int(query_result.get('parameters').get('number3'))  #내과실비율
        numb4 = int(query_result.get('parameters').get('number4'))  #가해자선지급
        numb5 = int(query_result.get('parameters').get('number5'))  #피해자선지급



        print('date1 = {0}'.format(date1))
        print('date2 = {0}'.format(date2))
        print('num1 = {0}'.format(numb1))
        print('num2 = {0}'.format(numb2))
        print('num3 = {0}'.format(numb3))


        생년월일 = date2
        입원기간 = numb1
        월소득 = numb2
        내과실 = numb3 * 0.01
        생계비공제 = 2/3


        print('===============날짜 구하기====================')

        #생년월일, 날짜str에서 datetime로 변환.
        dt = maya.parse(date2).datetime()
        print(dt)
        print('dt타입:', type(dt))
        #날짜만 구하기
        birth = datetime.date(dt)
        print('생년월일 :', birth)


        #사고일, 날짜str에서 datetime로 변환. 사고일에서 날짜 더하기 위함.
        accident_date = maya.parse(date1).datetime()
        print('사고일 :', accident_date)
        #날짜만 구하기(시분초 제외)
        acc_date = datetime.date(accident_date)
        print('사고일 날짜만추출:', acc_date)


        #사고당시 만나이 구하기(사고일-생년월일),  사고시점의 나이
        age = (acc_date - birth) // timedelta(days=365)  #나이로 계산 int. 출력용
        age_month = (acc_date - birth) // timedelta(365 / 12)  #사고당시 나이에 해당하는 총 일수를 월로 변환. 700개월 등
        print('age_month :', age_month)  #700개월 등, int
        print('사고일-생년월일 :', acc_date - birth)  #2020-01-01
        print('사고당시 만 나이:', age)  # 15, int


        #정년 종료일(60세 기준),
        sixty_date = datetime.date(birth + pd.DateOffset(years=60, days=-1))
        print('정년60세 종료일:', sixty_date)  #2020-01-01

        #정년 종료일(60세 기준) str
        sixty_date_str = sixty_date.strftime("%Y-%m-%d")
        print('sixty_date_str:', sixty_date_str)

        #가동 종료일(60세 기준),
        sixtyfive_date = datetime.date(birth + pd.DateOffset(years=65, days=-1))
        print('정년60세 종료일:', sixtyfive_date)  #2020-01-01

        #가동 종료일(60세 기준) str
        sixtyfive_date_str = sixtyfive_date.strftime("%Y-%m-%d")
        print('sixtyfive_date_str:', sixtyfive_date_str)


        print('===============입원기간 구하기-호프만계수 시작====================')

        #이제 퇴원일 구하기!, 퇴원일은 사고일에서 numb1을 더한 값
        퇴원일 = datetime.date(acc_date + pd.DateOffset(days=numb1-1)) #numb1은 입원기간
        print('퇴원일:',퇴원일)
        print('퇴원일 타입:',type(퇴원일))
        # 퇴원일_str = 퇴원일.strftime("%Y-%m-%d") #퇴원일을 str로 변환
        # print('퇴원일_str',퇴원일_str)
        # print('퇴원일_str 타입:',type(퇴원일_str))




        print('==========오늘날짜 구하기 ==========')

        #오늘날짜 구하기.
        오늘 = datetime.now()
        #날짜만 구하기(시분초 제외)
        오늘 = datetime.date(오늘)  #2020-01-01, datetime.date
        오늘_str = 오늘.strftime("%Y-%m-%d") #str로 변환
        print('오늘_str:',오늘_str)
        print('오늘_str type:',type(오늘_str))
        print('오늘:', 오늘)
        print('오늘 타입:', type(오늘))


        print('============!!!!입원기간반영위한 사고일조정!!!==============')
        #입원기간 호프만계수 버리기용도
        #도시일용은 다음달 계수로 반영. 그렇기 때문에 이걸 적용해야 함.
        #반대로 첫사고일 부터 한달채움 계산은 사고일을 기준!! 이거적용하면 안됨. 이것만 해결하면 될거 같은데 미치겠다 진짜 나좀 살려주라!!
        #입원기간에서 for월별입원기간조회하고 실제입원일수 계산할때만 한달채움을 사용.
        #입원만 반영해야 함.
        #최초 입원일이 1일이 아닌경우 입원계산에서 최초달을 버리기 위함.
        입원시작년 = int(acc_date.strftime('%Y'))  # 해당년도 뽑아내기
        입원시작월 = int(acc_date.strftime('%m'))  # 해당월 뽑아내기
        입원시작일 = int(acc_date.strftime('%d'))
        print('입원시작년,월,일',입원시작년,입원시작월,입원시작일)

        #사고일의다음달 구하기
        사고일다음달 = acc_date+ pd.DateOffset(months=1)
        print('사고일다음달:',사고일다음달)

        #사고일 다음달의 1일 구하기
        사고일다음달첫날 = datetime.date(사고일다음달.replace(day=1))
        print('date first:',사고일다음달첫날)
        print('date first:',type(사고일다음달첫날))

        if 입원시작일 ==1: #입원시작일이 1일이면 그대로, 2일부터면 버리기.
          ad_acc_date = acc_date
        else:
          ad_acc_date = 사고일다음달첫날
        print('ad_acc_date:',ad_acc_date)


#사고일의 다음달 날짜가 사고월의 총일수와 동일하게 되는 경우. 1달로 인식하도록.



        print('===============정년기간개월수 및 실제일수==============')
        #호프만계수
        단순정년기간조회 = pd.date_range(acc_date,sixty_date, freq='1m') # 생일~가동기간까지 1달씩
        단순정년기간개월수 = len(단순정년기간조회)
        print('단순정년기간조회:', 단순정년기간조회)
        print('단순정년기간개월수:',단순정년기간개월수)


        #정년기간 실제일수 구하기, 정확한 계산위해. 실제일수가 더 큰 경우는 없음.
        실제정년일수 =((sixty_date- acc_date) // timedelta( days=1)+1)
        print('실제정년_days:',실제정년일수) #1000 int , 오늘적용위해 수정.


        sum1=0
        monthList=[]
        append = monthList.append #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        정년기간개월수_for = 단순정년기간조회.strftime('%d') #for문 적용 위함.
        for i in 정년기간개월수_for:
          sum1 += int(i) #정해진 기간의 월말 일수 모두 더하기
          append(i)
        for_조회정년일수 = sum1
        print('for_조회정년일수:',for_조회정년일수)

        실제정년일수와차이일수 = for_조회정년일수-실제정년일수
        print('실제정년일수와차이일수:',실제정년일수와차이일수) #0보다 크면 over된 수치.

        #아래 정년기간개월수()함수에 정년기간비교해서 정년마지막일보다도 더 크면 2개월을 공제해야함.
        #실제정년일수보다 for_조회정년일수가 0보다도 크면 무조건 1은 빼줘야 함.
        정년마지막년 = int(sixty_date.strftime('%Y')) # 정년마지막기간 해당년도 뽑아내기
        정년마지막월 = int(sixty_date.strftime('%m')) # 정년마지막기간 해당월 뽑아내기
        정년마지막월_말일 = calendar.monthrange(정년마지막년, 정년마지막월)[1]
        print('정년마지막월_말일:',정년마지막월_말일)

        #단순개월수조회가 2개월 이상 over되는 경우때문에 이 함수 사용.
        def 정년기간개월수():
          if 실제정년일수 < for_조회정년일수 and 실제정년일수와차이일수 > 정년마지막월_말일:
            return 단순정년기간개월수 -2 #
          elif 실제정년일수 < for_조회정년일수 and 실제정년일수와차이일수 <= 정년마지막월_말일:
            return 단순정년기간개월수 -1 #여기를 수정. 끼리낄 마이너스해서 남은일수 나누기 30.4166으로 나눈값을 마이너스.
          else:
            return 단순정년기간개월수
        print('정년기간개월수():',정년기간개월수())

        print('===============가동기간개월수 및 실제일수==============')
        #호프만계수
        단순가동기간조회 = pd.date_range(acc_date,sixtyfive_date, freq='1m') # 생일~가동기간까지 1달씩
        단순가동기간개월수 = len(단순가동기간조회)
        print('단순가동기간조회:', 단순가동기간조회)
        print('단순가동기간개월수:',단순가동기간개월수)


        #가동기간 실제일수 구하기, 정확한 계산위해. 실제일수가 더 큰 경우는 없음.
        실제가동일수 =((sixtyfive_date- acc_date) // timedelta( days=1)+1)
        print('실제가동_days:',실제가동일수) #1000 int , 오늘적용위해 수정.


        sum1=0
        monthList=[]
        append = monthList.append #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        가동기간개월수_for = 단순가동기간조회.strftime('%d') #for문 적용 위함.
        for i in 가동기간개월수_for:
          sum1 += int(i) #정해진 기간의 월말 일수 모두 더하기
          append(i)
        for_조회가동일수 = sum1
        print('for_조회정년일수:',for_조회가동일수)

        실제가동일수와차이일수 = for_조회가동일수-실제가동일수
        print('실제가동일수와차이일수:',실제가동일수와차이일수) #0보다 크면 over된 수치.

        #아래 가동기간개월수()함수에 가동기간비교해서 가동마지막일보다도 더 크면 2개월을 공제해야함.
        #실제가동일수보다 for_조회가동일수가 0보다도 크면 무조건 1은 빼줘야 함.
        가동마지막년 = int(sixtyfive_date.strftime('%Y')) # 가동마지막기간 해당년도 뽑아내기
        가동마지막월 = int(sixtyfive_date.strftime('%m')) # 정년마지막기간 해당월 뽑아내기
        가동마지막월_말일 = calendar.monthrange(가동마지막년, 가동마지막월)[1]
        print('가동마지막월_말일:',가동마지막월_말일)

        def 가동기간개월수():
          if 실제가동일수 < for_조회가동일수 and 실제가동일수와차이일수 > 가동마지막월_말일:
            return 단순가동기간개월수 -2 #
          elif 실제가동일수 < for_조회가동일수 and 실제가동일수와차이일수 <= 가동마지막월_말일:
            return 단순가동기간개월수 -1
          else:
            return 단순가동기간개월수
        print('가동기간개월수():',가동기간개월수())


        print('===============대표적호프만계수===================')

        #정년(60세) 호프만, hoffman sql data 불러오기
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        db = conn.cursor()
        setdata = (max(0,정년기간개월수()), )  #변수로 검색위해
        query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
        data4 = db.fetchone()
        data4 = (data4[0])  # 튜플을 float으로 변환
        정년호프만 = data4
        print('정년 호프만 타입:', type(data4))
        print('정년기간 호프만:', data4)



        #가동기간(65세) 호프만, hoffman sql data 불러오기
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        db = conn.cursor()
        setdata = (max(0,가동기간개월수()), )  #변수로 검색위해
        query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
        data5 = db.fetchone()
        data5 = (data5[0])  # 튜플을 float으로 변환
        가동호프만 = data5
        print('가동기간 타입:', type(data5))
        print('가동기간 호프만:', data5)

        #=========================================================



        print('==============================입원기간===============================')
        print('================1. 퇴원일까지 월별 말일 조회!!!!!오늘까지==============')

        #월별기간조회해서 총합구하고 나눠서 개월수 구하는 매우 중요한 용도!!!!!진심 중요
        퇴원일65세비교후 = min(퇴원일, sixtyfive_date)  # 여기서 퇴원일은 65세와 비교해서 적용해야 함. 단순조회.


        단순입원기간조회 = pd.date_range(acc_date,퇴원일65세비교후, freq='1M') #
        단순입원기간개월수 = len(단순입원기간조회)
        print('단순입원기간조회:', 단순입원기간조회)
        print('단순입원기간개월수:', 단순입원기간개월수)

        series_월별기간조회 = pd.Series(range(len(단순입원기간조회)), index=단순입원기간조회) #도시일용조회
        print('series_월별기간조회',series_월별기간조회)

        #실제 일수 구하기
        admission_days =max(0, ((퇴원일65세비교후 - acc_date) // timedelta( days=1))+1)
        print('admission_days:',admission_days) #1000 int , 오늘적용위해 수정.

        sum1 = 0
        monthList = []
        append = monthList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        입원기간개월수_for = 단순입원기간조회.strftime('%d')  #for문 적용 위함.
        for i in 입원기간개월수_for:
            sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
            append(i)
        for_월별입원기간조회 = sum1
        print('for_월별입원기간조회:', sum1)
        print('monthList', monthList)

        실제입원일수와차이일수 = for_월별입원기간조회 - admission_days
        print('실제입원일수와차이일수:', 실제입원일수와차이일수)  #0보다 크면 over된 수치.

        fullmonth_days = for_월별입원기간조회 - 실제입원일수와차이일수
        print('fullmonth_days',fullmonth_days)



        def 입원기간개월수():
            if admission_days < for_월별입원기간조회 and fullmonth_days > admission_days:
                return 단순입원기간개월수 - 2  #
            elif admission_days < for_월별입원기간조회 and fullmonth_days <= admission_days:
                return 단순입원기간개월수 - 1
            else:
                return 단순입원기간개월수


        print('입원기간개월수():', 입원기간개월수())





        print('====================2.총입원호프만계수 구하기===================')

        #입원 총 호프만계수 구하기
        setdata = (입원기간개월수(), ) #오늘적용위해 수정
        print('setdata:',setdata)
        query = db.execute("SELECT hoffman from hoff where year=%s",setdata)
        hoffman_data = db.fetchone()
        hoffman_data = float(hoffman_data[0])  # 튜플을 float으로 변환
        총입원호프만 = min(240,hoffman_data)
        print('총입원기간 호프만:', hoffman_data)  #0.995850622




        print('==================3. 오늘까지 진정한 최대 개월수 구하기================')

        단순입원기간조회_오늘까지 = pd.date_range(acc_date,min(오늘,퇴원일65세비교후), freq='1M') #
        print('단순입원기간조회:', 단순입원기간조회)

        단순입원기간개월수_오늘까지 = len(단순입원기간조회_오늘까지)
        print('단순입원기간개월수_오늘까지:', 단순입원기간개월수_오늘까지)

        #오늘까지 실제 일수 구하기
        admission_days =max(0,((min(오늘,퇴원일65세비교후)- acc_date) // timedelta( days=1))+1)
        print('admission_days:',admission_days) #1000 int , 오늘적용위해 수정.



        sum1 = 0
        monthList = []
        append = monthList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        입원기간개월수_for_오늘까지 = 단순입원기간조회_오늘까지.strftime('%d')  #for문 적용 위함.
        for i in 입원기간개월수_for_오늘까지:
            sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
            append(i)
        for_월별입원기간조회_오늘까지 = sum1
        print('for_월별입원기간조회_오늘까지:', sum1)
        print('monthList', monthList)

        실제입원일수와차이일수_오늘까지 = for_월별입원기간조회_오늘까지 - admission_days
        print('실제입원일수와차이일수:', 실제입원일수와차이일수)  #0보다 크면 over된 수치.


        fullmonth_days = for_월별입원기간조회 - 실제입원일수와차이일수_오늘까지
        print('fullmonth_days:',fullmonth_days)


        #오늘까지 총 입원개월수 선정
        def 입원기간개월수_오늘까지():
            if admission_days < for_월별입원기간조회_오늘까지 and fullmonth_days > admission_days:
                return 단순입원기간개월수_오늘까지 - 2  #
            elif admission_days < for_월별입원기간조회_오늘까지 and fullmonth_days <= admission_days:
                return 단순입원기간개월수_오늘까지 - 1
            else:
                return 단순입원기간개월수_오늘까지


        print('입원기간개월수_오늘까지():', 입원기간개월수_오늘까지())


        print('================4.for문으로 오늘까지 호프만계수 구하기==================')
        #저 위에서 다 정리하고 여기에 개월수 넣기.

        hofList=[] #호프만 계수
        append = hofList.append#아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속 #프로그램 전체 접속 구문%s
        db = conn.cursor()
        if 입원기간개월수_오늘까지() ==0:
          입원기간개월수_오늘까지() ==0
        else:
          for o in range(1,입원기간개월수_오늘까지()+1):
            setdata = (o , )  #변수로 검색위해
            query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
            hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
            hoffman = float(hoffman[0])  # 튜플을 float으로 변환
            append(hoffman)
          hoffman = min(hoffman, 240)
        print('hofList:',hofList) #hoffman 계수 구해서 리스트에 담기


        hof_m_List=[] #공제위한 계수 조회
        append = hof_m_List.append#아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        if 입원기간개월수_오늘까지() ==0:
          입원기간개월수_오늘까지() ==0
        else:
          for k in range(0,입원기간개월수_오늘까지()):
            setdata = (k , )  #변수로 검색위해
            query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
            hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
            hoffman = float(hoffman[0])  # 튜플을 float으로 변환
            append(hoffman)
          hoffman = min(hoffman, 240)
        print('hof_m_List:',hof_m_List) #hoffman 계수 구해서 리스트에 담기





        print('==========================5.도시일용=======================')

        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        #오늘기준 도시일용노임
        setdata = (오늘_str, )  #변수로 검색위해, 사고일.
        setdata = (setdata[0])  # 튜플을 str로 변환
        db = conn.cursor()
        query = db.execute("SELECT dosi_month from dosi where date=%s",[setdata])
        data3 = db.fetchone()
        dosi_today = (data3[0])  # 튜플을 변환
        dosi_today_p = format(dosi_today,",")
        print('오늘기준도시일용노임:', dosi_today)  #int, 3042000


        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        #사고일기준 도시일용노임
        setdata = (acc_date, )  #변수로 검색위해, 사고일.
        setdata = (setdata[0])  # 튜플을 str로 변환
        db = conn.cursor()
        query = db.execute("SELECT dosi_month from dosi where date=%s",[setdata])
        data3 = db.fetchone()
        dosi_acc = (data3[0])  # 튜플을 변환
        dosi_acc_p = format(dosi_acc,",")
        print('사고일기준도시일용노임:', dosi_acc)  #int, 3042000

        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        퇴원일65세비교후dosi = min(퇴원일+ pd.DateOffset(months=1), sixtyfive_date)
        print('퇴원일+ pd.DateOffset(days=입원시작일)',퇴원일+ pd.DateOffset(days=입원시작일))

        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        단순입원기간조회_dosi = pd.date_range(ad_acc_date, 퇴원일65세비교후dosi, freq='M')
        단순입원기간개월수_dosi = len(단순입원기간조회_dosi)
        print('단순입원기간조회_dosi:', 단순입원기간조회_dosi)
        print('단순입원기간개월수_dosi:', 단순입원기간개월수_dosi)

        #1달미만 버림후 도시일용적용 위함..도시일용노임만을 위함
        series_월별기간조회_dosi = pd.Series(range(len(단순입원기간조회_dosi)), index=단순입원기간조회_dosi)  #도시일용조회
        print('series_월별기간조회_dosi', series_월별기간조회_dosi)


        #index를 for문으로

        incomeList=[]
        append = incomeList.append
        for x in series_월별기간조회_dosi:
          입원기준 = (series_월별기간조회_dosi.index[x]).strftime('%Y-%m-%d')
          print('입원기준',입원기준)
          ##오늘보다 입원기준 날짜가 크면 도시일용노임을 오늘기준으로
          setdata = (입원기준, )  #변수로 검색위해, 사고일.
          setdata = (setdata[0])  # 튜플을 str로 변환
          query = db.execute("SELECT dosi_month from dosi where date=%s",[setdata])

          if 입원기준>오늘_str:
            data = (dosi_today,)
          else:
            data = db.fetchone()

          dosi = (data[0])  # 튜플을 변환

          #입원기준이 60세 정년보다 크면 도시일용 적용.
          if 입원기준 > sixty_date_str:
            income = dosi
          elif 입원기준 > sixtyfive_date_str:
            income = 0
          else:
            income = max(dosi,월소득) #도시일용과 월소득 중 높은 금액

          append(income) #도시일용노임 리스트에 담기
        print('incomeList:',incomeList)



        print('==========================6.오늘까지 List calc=======================')

        #호프만끼리 공제
        hoffman_calc=[]
        a1 = hofList
        a2 = hof_m_List

        for w in range(len(a1)):
          hoffman_calc.append(a1[w]-a2[w])
        print(hoffman_calc)
        hoffman_today합계 = sum(hoffman_calc) #오늘위해 수정
        print('hoffman_calc합계:',hoffman_today합계)

        #hoffman과 dosi 곱하기,
        ilsil_admission = []
        b1 = hoffman_calc
        b2 = incomeList
        for i in range(len(b1)):
            ilsil_admission.append(b1[i] * b2[i])
        print('ilsil_admission',ilsil_admission)

        print('===============7.사고일~오늘까지 입원합계===================')
        #ilsil 안의 값 모두 더하기. 그러면 일실수입 합계 구해짐
        a=sum(ilsil_admission)
        입원기간일실수입_오늘까지 = a
        print('입원기간일실수입_오늘까지:',입원기간일실수입_오늘까지)

        print('==================8.오늘이후~퇴원까지 입원합계===============')
        #총입원호프만이 0인경우 오류방지 위함.
        if 총입원호프만 == 0:
            income =0
        else:
            income = income
        print('income',income)

        #오늘이후 정년까지 호프만계수 산정, 정년이후 퇴원까지 호프만계수 산정
        #총입원호프만이 정년호프만보다 큰 경우 정년기간이후 가동기간까지는 도시일용.
        #총입원호프만이 정년호프만보다 작은 경우 예전 그대로.
        #장해쪽은 이미 모든게 적용되서 필요 없고, 입원의 경우 오늘날짜보다 정년이 긴 경우 정상적인 계산이 되지 않는 관계로 이 if함수를 적용하게됨.


        if 총입원호프만 <= 정년호프만:
          오늘이후Hoffman = 총입원호프만 - hoffman_today합계
          입원기간일실수입_오늘이후 = income * 오늘이후Hoffman
          print('오늘이후Hoffman:', 오늘이후Hoffman)
          print('입원기간일실수입_오늘이후:', 입원기간일실수입_오늘이후)

        elif 총입원호프만 > 정년호프만:
          오늘이후정년까지Hoffman = max(정년호프만,hoffman_today합계) - hoffman_today합계
          오늘정년이후가동까지Hoffman = max(0, min(가동호프만, 총입원호프만) -  max(정년호프만,hoffman_today합계))
          오늘이후Hoffman = 오늘이후정년까지Hoffman + 오늘정년이후가동까지Hoffman
          print('오늘이후정년까지Hoffman:', 오늘이후정년까지Hoffman)
          print('오늘정년이후가동까지Hoffman:', 오늘정년이후가동까지Hoffman)
          print('오늘이후Hoffman:', 오늘이후Hoffman)

          입원기간일실수입_오늘이후 = (월소득 * 오늘이후정년까지Hoffman) + (dosi_today * 오늘정년이후가동까지Hoffman)
          print('입원기간일실수입_오늘이후:', 입원기간일실수입_오늘이후)

        print('================9.입원기간일실수입 총합계====================')
        입원기간일실수입총합계 = 입원기간일실수입_오늘이후 + 입원기간일실수입_오늘까지
        print('입원기간일실수입총합계',입원기간일실수입총합계)
        print('입원기간 총호프만계수:',오늘이후Hoffman+hoffman_today합계)




        print('==============================사망===============================')
        print('======================10.오늘까지 사망기간(max 정년)===================')
        #for old man, 10번 11번 이 함수 추가.
        #오늘보다 정년이 더 짧은 분들은 연세가 매우 많으신 분들 위한 함수. 굳이 정년적용할 필요 없이 그냥 가동기간과 사고일 비교위해 이 함수 적용.
        if 오늘 > sixty_date:
          sixty_date = sixtyfive_date
        else:
          sixty_date = sixty_date
        print('sixty_date',sixty_date)


        #여기서부터는 정상.
        월별기간조회_오늘까지 = pd.date_range(ad_acc_date, min(sixty_date, 오늘), freq='1M')
        print('월별기간조회_오늘까지:', 월별기간조회_오늘까지)

        series_월별기간조회_오늘까지 = pd.Series(range(len(월별기간조회_오늘까지)), index=월별기간조회_오늘까지)
        print('series_월별기간조회_오늘까지:', series_월별기간조회_오늘까지)


        sum1 = 0
        monthList = []
        append = monthList.append
        월별기간조회_오늘까지 = 월별기간조회_오늘까지.strftime('%d')
        print('월별기간조회_오늘까지:', 월별기간조회_오늘까지)
        for i in 월별기간조회_오늘까지:
            sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
            #print('월별기간조회_오늘까지 sum:',sum1)
            append(i)
        for_월별장해기간조회 = sum1
        월말기준개월수 = len(월별기간조회_오늘까지)  # 10, int, 이수치가 실질적으로 호프만계수에 적용되는 부분. 개월수
        print('월말기준개월수:', 월말기준개월수)

        print('monthList', monthList)

        print('========11.오늘까지 사망기간(max 정년) 진정한 최대 개월수 구하기=============')

        #for old man, 10번 11번 이 함수 추가.
        #오늘보다 정년이 더 짧은 분들은 연세가 매우 많으신 분들 위한 함수. 굳이 정년적용할 필요 없이 그냥 가동기간과 사고일 비교위해 이 함수 적용.
        if 오늘 > sixty_date:
          sixty_date = sixtyfive_date
        else:
          sixty_date = sixty_date
        print('sixty_date',sixty_date)


        #여기서부터는 정상.
        LCL_days = max(0, ((min(sixty_date, 오늘) - ad_acc_date) // timedelta(days=1)) + 1)
        print('LCL_days:', LCL_days)  #1000 int

        실제장해일수와차이일수 = for_월별장해기간조회 - LCL_days
        print('실제장해일수와차이일수:', 실제장해일수와차이일수)  #0보다 크면 over된


        fullmonth_days = for_월별장해기간조회 - 실제장해일수와차이일수
        print('fullmonth_days',fullmonth_days)


        def hof_month_max_LCL():
            if LCL_days < for_월별입원기간조회 and fullmonth_days > LCL_days:
                return 월말기준개월수 - 2  #
            elif LCL_days < for_월별입원기간조회 and fullmonth_days <= LCL_days:
                return 월말기준개월수 - 1
            else:
                return 월말기준개월수
        print('hof_month_max():', hof_month_max_LCL())


        print('===============12.오늘까지 사망 for문으로 호프만계수 구하기==============')
        #저 위에서 다 정리하고 여기에 개월수 넣기.

        hofList_LCL=[] #호프만 계수
        append = hofList_LCL.append
        if hof_month_max_LCL() <= 0: #0보다 작은경우 0으로 표시해서 오류 없애기
          hof_month_max_LCL() ==0
        else:
          for o in range(1,hof_month_max_LCL()+1):

            conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
            db = conn.cursor()
            setdata = (o , )  #변수로 검색위해
            query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
            hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
            hoffman = float(hoffman[0])  # 튜플을 float으로 변환
            append(hoffman)#조회된 월별기간 30,29,31 을 myList에 담기
          hoffman = min(hoffman, 240)
          print('hofList_LCL:',hofList_LCL) #hoffman 계수 구해서 리스트에 담기


        hof_m_List_LCL=[] #공제위한 계수 조회
        append = hof_m_List_LCL.append
        if hof_month_max_LCL() <= 0:
          hof_month_max_LCL() ==0
        else:
          for k in range(0,hof_month_max_LCL()):

            conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
            db = conn.cursor()
            setdata = (k , )  #변수로 검색위해
            query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
            hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
            hoffman = float(hoffman[0])  # 튜플을 float으로 변환
            append(hoffman)#조회된 월별기간 30,29,31 을 myList에 담기
          hoffman = min(hoffman, 240)
          print('hof_m_List_LCL:',hof_m_List_LCL) #hoffman 계수 구해서 리스트에 담기


        print('==========================13.도시일용=======================')

        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        #오늘기준 도시일용노임
        setdata = (오늘_str, )  #변수로 검색위해, 사고일.
        setdata = (setdata[0])  # 튜플을 str로 변환
        db = conn.cursor()
        query = db.execute("SELECT dosi_month from dosi where date=%s",[setdata])
        data3 = db.fetchone()
        dosi_today = (data3[0])  # 튜플을 변환
        dosi_today_p = format(dosi_today,",")
        print('오늘기준도시일용노임:', dosi_today)  #int, 3042000
        print('오늘기준도시일용노임 타입:', type(dosi_today))



        #index를 for문으로
        incomeList=[]
        append = incomeList.append
        for x in series_월별기간조회_오늘까지:
          사망기준 = (series_월별기간조회_오늘까지.index[x]).strftime('%Y-%m-%d')
          print('사망기준',사망기준)
          setdata = (사망기준, )  #변수로 검색위해, 사고일.
          setdata = (setdata[0])  # 튜플을 str로 변환
          query = db.execute("SELECT dosi_month from dosi where date=%s",[setdata])


          if 사망기준 > 오늘_str:##오늘보다 입원기준 날짜가 크면 도시일용노임을 오늘기준으로
            data = (dosi_today,)
          else:
            data = db.fetchone()

          dosi = (data[0])  # 튜플을 변환


          #입원기준이 60세 정년보다 크면 도시일용 적용.
          if 사망기준 > sixty_date_str:
            income = dosi
          elif 사망기준 > sixtyfive_date_str:
            income = 0
          else:
            income = max(dosi,월소득) #도시일용과 월소득 중 높은 금액

          append(income) #도시일용노임 리스트에 담기
        print('incomeList:',incomeList)



        print('==========================14.List calc=======================')

        #호프만끼리 공제
        hoffman_calc_LCL=[]
        a3 = hofList_LCL
        a4 = hof_m_List_LCL

        for w in range(len(a3)):
          hoffman_calc_LCL.append(a3[w]-a4[w])
        print(hoffman_calc_LCL)
        hoffman_LCL_today합계 = sum(hoffman_calc_LCL) #오늘위해 수정,
        print('hoffman_LCL_today합계:',hoffman_LCL_today합계)

        #hoffman과 dosi 곱하기,
        ilsil_LCL = []
        a3 = hoffman_calc_LCL
        a4 = incomeList
        for i in range(len(a3)):
            ilsil_LCL.append(a3[i] * a4[i])
        print(ilsil_LCL)








        print('==================15.사고일~오늘까지 사망 합계================')
        오늘까지사망Hoffman = max(0, min(240 - 총입원호프만, hoffman_LCL_today합계 - 총입원호프만))
        print('오늘까지사망Hoffman:',오늘까지사망Hoffman)

        사망일실수입_오늘까지=max(0, sum(ilsil_LCL) - 입원기간일실수입총합계) * 생계비공제
        print('사망일실수입_오늘까지:',사망일실수입_오늘까지)

        print('==================16.오늘이후 ~ 정년기간까지 합계=============')
        정년Hoffman = max(0, min(240 - max(hoffman_LCL_today합계,총입원호프만), 정년호프만 - max(hoffman_LCL_today합계,총입원호프만)))
        print('오늘이후Hoffman:',정년Hoffman)

        사망기간일실수입_정년 = max(월소득,dosi_today) * 정년Hoffman * 생계비공제
        print('사망기간일실수입_정년:',사망기간일실수입_정년)



        print('==================17.정년 ~ 가동기간까지 합계=============')
        가동Hoffman = max(0, min(240 - max(정년호프만, hoffman_LCL_today합계, 총입원호프만) , 가동호프만 - max(정년호프만, hoffman_LCL_today합계, 총입원호프만)))
        print('가동Hoffman:',가동Hoffman)

        사망기간일실수입_가동 = dosi_today * 가동Hoffman * 생계비공제
        print('사망기간일실수입_가동:',사망기간일실수입_가동)



        print('================18.사망기간 총 합계===============')
        사망기간총호프만합계 = 오늘까지사망Hoffman + 정년Hoffman + 가동Hoffman
        print('사망기간총호프만합계',사망기간총호프만합계)

        사망기간일실수입총합계 = 사망기간일실수입_가동 + 사망기간일실수입_정년 + 사망일실수입_오늘까지
        print('사망기간일실수입총합계',사망기간일실수입총합계)

        호프만계수총합 = 사망기간총호프만합계 + 총입원호프만
        print('호프만계수총합 :', 호프만계수총합)

        print('===============19. 위자료 계산시작====================')
        위자료 = 100000000
        print('위자료 :', 위자료)


        print('===============20. 최종정리====================')

        총일실수입 = 사망기간일실수입총합계 + 입원기간일실수입총합계


        print('입원기간일실수입총합계:',입원기간일실수입총합계)
        print('사망기간일실수입총합계:',사망기간일실수입총합계)
        print('총일실수입 : ',총일실수입)
        print('위자료 :', 위자료)





        print('===============21. 최종정리 과실적용====================')
        과실적용 = 1 - 내과실  # 과실적용

        입원기간일실수입총합계Last = 입원기간일실수입총합계 * 과실적용
        정년기간일실수입Last = (사망일실수입_오늘까지 + 사망기간일실수입_정년) * 과실적용
        가동기간일실수입Last = 사망기간일실수입_가동
        총일실수입Last = 총일실수입 * 과실적용
        위자료Last = 위자료 * (1 - 내과실 * 0.6) #영구위자료
        장례비Last = 5000000 * 과실적용
        가해자선지급Last = numb4 * 내과실 #20210130추가, 가해자선지급은 100*20%=20만원을 마이너스
        피해자선지급Last = numb5 * 과실적용 #20210130추가, 가해자선지급은 100*80%=80만원을 플러스
        손해배상합계Last = 총일실수입Last + 위자료Last + 장례비Last + 피해자선지급Last - 가해자선지급Last

        입원기간일실수입총합계Last = format(int(입원기간일실수입총합계Last), ",")  #출력용
        정년기간일실수입Last = format(int(정년기간일실수입Last), ",")
        가동기간일실수입Last = format(int(가동기간일실수입Last), ",")
        총일실수입Last = format(int(총일실수입Last), ",")  #출력용
        위자료Last = format(int(위자료Last), ",")  #출력용
        장례비Last = format(int(장례비Last), ",")  #출력용
        가해자선지급Last = format(int(가해자선지급Last), ",")  #출력용
        피해자선지급Last = format(int(피해자선지급Last), ",")  #출력용
        손해배상합계Last = format(int(손해배상합계Last), ",")  #출력용


        print('입원기간일실수입총합계Last:',입원기간일실수입총합계Last)
        print('정년기간일실수입Last:',정년기간일실수입Last)
        print('가동기간일실수입Last:',가동기간일실수입Last)
        print('총일실수입Last :',총일실수입Last)
        print('위자료Last:',위자료Last)
        print('장례비Last:',장례비Last)
        print('가해자선지급Last:',가해자선지급Last)
        print('피해자선지급Last:',피해자선지급Last)
        print('손해배상합계Last:',손해배상합계Last)

        fulfillmentText = '\n==========================\n📜위손사_BOT ver 1.0 \n==========================\n📜기초정보 및 보상금 평가근거\n========================== \n\n 1.날짜 및 나이 정보\n -사고당시 나이 : 만' + str(age) + '세 \n -사고일자 : ' + str(acc_date) + '\n -생년월일 : ' + str(birth) + '\n -정년(60세)종료일 :' + str(sixty_date) + '\n -가동기간(65세)종료일 :' + str(sixtyfive_date) + ' \n\n 2.기간 정보 \n -입원기간 : ' + str(numb1) + '일 \n\n 3.소득관련 정보 \n -월소득 : ' + str(월소득) + '원 \n -사고당시 도시일용노임 : ' + str(dosi_acc_p) + '원 \n -현재 도시일용노임 :' + str(dosi_today_p) + '원 \n\n 4.과실비율 및 생계비공제 \n -나의 과실비율 :' + str(numb3) + '% \n -생계비공제 :1/3 \n\n 5.중간이자 및 생계비공제 정보 \n -입원호프만계수 :'+str(총입원호프만)+' \n -정년호프만계수 : '+str(정년호프만)+' \n -가동호프만계수 : '+str(가동호프만)+'\n\n 6.위자료 기준 \n ※ 위자료는 나이, 직업 등 여러 요소를 참작하여 산정.\n\n\n==========================\n📜예상 보상금(사망) \n========================== \n\n 1️⃣일실수입(입원) : ' + str(입원기간일실수입총합계Last) + '원 \n 2️⃣일실수입(정년) :' + str( 정년기간일실수입Last) + '원 \n 3️⃣일실수입(가동기간) : ' + str(가동기간일실수입Last) + ' 원 \n----------------------------------------------------\n 4️⃣일실수입합계 : '+str(총일실수입Last)+'\n----------------------------------------------------\n 5️⃣위자료 :' + str(위자료Last) + '원\n 6️⃣장례비 :'+str(장례비Last)+'원 \n 7️⃣피해자측 선지급 :'+str(피해자선지급Last)+'\n 8️⃣가해자측 선지급 : '+str(가해자선지급Last)+'\n----------------------------------------------------\n 9️⃣보상금 합계(4️⃣+5️⃣+6️⃣+7️⃣-8️⃣) :' + str(손해배상합계Last) + '원 \n\n\n 제일 처음으로 돌아가려면 채팅창에 "홈" 입력 또는  https://page.line.me/964ctcvt  <-링크클릭.\n\n\n [참고] \n-각 기간별 변동 도시일용노임 적용.\n -실제월소득과 도시일용노임 중 높은 소득을 적용. \n -정년이후로는 도시일용노임 적용.\n -중간이자 공제는 호프만계수 적용하며, 최대인정계수는 240H.'



############################################################
##############################################################
###############################################################
#################################################################


    #==============간병비====================================

    elif query_result.get('action') == 'care':
        #get data
        numb1 = int(query_result.get('parameters').get('number1'))  #성별 1, 2
        date1 = query_result.get('parameters').get('date')  #사고일2020-10-10
        date2 = query_result.get('parameters').get('date1')  #생년월일 2020-01-01
        numb2 = int(query_result.get('parameters').get('number2'))  #내과실비율 10%
        numb3 = int(query_result.get('parameters').get('number3'))  #간병기간 10년
        numb4 = float(query_result.get('parameters').get('number4')) #간병인원 1명


        print('num1 = {0}'.format(numb1))
        print('date1 = {0}'.format(date1))
        print('date2 = {0}'.format(date2))
        print('num2 = {0}'.format(numb2))
        print('num3 = {0}'.format(numb3))
        print('num4 = {0}'.format(numb4))



        print('===============성별 구하기====================')
        sex=numb1 #1은 남성, 2는 여성
        print('sex:',sex)

        def sex_p():
          if sex ==1:
            return "남성"
          else:
            return "여성"
        print('sex_p():',sex_p())

        print('===============날짜 구하기====================')

        #생년월일, 날짜str에서 datetime로 변환.
        dt = maya.parse(date2).datetime()
        print(dt)
        print('dt타입:', type(dt))
        #날짜만 구하기
        birth = datetime.date(dt)
        print('생년월일 :', birth)

        #사고일, 날짜str에서 datetime로 변환. 사고일에서 날짜 더하기 위함.
        accident_date = maya.parse(date1).datetime()
        print('사고일 :', accident_date)
        print('acc타입:', type(accident_date))
        #날짜만 구하기(시분초 제외)
        acc_date = datetime.date(accident_date)
        print('사고일 날짜만추출:', acc_date)
        사고일_str = acc_date.strftime("%Y-%m-%d")
        print('사고일_str',사고일_str)

        #사고당시 만나이 구하기(사고일-생년월일),  사고시점의 나이
        age = (acc_date - birth) // timedelta(days=365)  #나이로 계산 int. 출력용
        age_month = (acc_date - birth) // timedelta(365 / 12)  #사고당시 나이에 해당하는 총 일수를 월로 변환. 700개월 등
        print('age_month type :', type(age_month))  #int
        print('age_month :', age_month)  #700개월 등
        print('사고일-생년월일 :', acc_date - birth)  #2020-01-01
        print('사고당시 만 나이:', age)  # 15
        print('사고당시 만 나이 type:', type(age))  #int



        print('==========오늘날짜 구하기 ==========')

        #오늘날짜 구하기.
        오늘 = datetime.now()
        #날짜만 구하기(시분초 제외)
        오늘 = datetime.date(오늘)  #2020-01-01, datetime.date
        오늘_str = 오늘.strftime("%Y-%m-%d") #str로 변환
        print('오늘_str:',오늘_str)
        print('오늘_str type:',type(오늘_str))
        print('오늘:', 오늘)
        print('오늘 타입:', type(오늘))

        #오늘기준 도시일용노임 * 월단위로 변경시 필요
        오늘해당년 = int(acc_date.strftime('%Y'))  # 해당년도 뽑아내기
        오늘해당월 = int(acc_date.strftime('%m'))  # 해당월 뽑아내기
        오늘해당일 = int(acc_date.strftime('%d'))
        print('오늘해당년,월,일',오늘해당년,오늘해당월,오늘해당일)

        오늘해당_말일 = calendar.monthrange(오늘해당년, 오늘해당월)[1]
        print('오늘해당_말일',오늘해당_말일)


        print('===============대표적호프만계수====================')
        #sql nwehof.db 접속, 호프만계수
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속

        #한시간병기간 호프만, hoffman sql data 불러오기
        db = conn.cursor()
        setdata = (numb3 * 12, )  #변수로 검색위해, 10년*12개월
        query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
        data = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
        data = float(data[0])  # 튜플을 float으로 변환
        한시간병호프만 = data
        print('한시 간병 호프만 타입:', type(한시간병호프만))
        print('한시 간병 호프만:', 한시간병호프만)




        print('===============간병기간 구하기-호프만계수 시작====================')

        #이제 간병종료일 구하기!, 간병종료일은 사고일에서 numb3(간병기간)을 더한 값
        간병종료일 = acc_date + pd.DateOffset(years=numb3, days=-1) #
        print('간병종료일:',간병종료일)
        print('간병종료일 타입:',type(간병종료일))
        간병종료일_str = 간병종료일.strftime("%Y-%m-%d") #간병종료일을 str로 변환
        print('간병종료일_str',간병종료일_str)
        print('간병종료일_str 타입:',type(간병종료일_str))


        print('==========여명기간 구하기 ==========')

        사고일년도 = min('2019',acc_date.strftime('%Y'))  #컬럼명, 향후 생명표업데이트시 min부분 수정. 생명표가 사고일기준으로 출력되는데 현재 2019년도까지만 업데이트된 상황이러 그럼.  2019->2020이런식으로 변경.
        사고일년도 = int(사고일년도)#+'년'
        print('사고일년도:',사고일년도)
        print('사고일년도 타입 : ',type(사고일년도))


        #남자 여명기간 구하기
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        db = conn.cursor()
        setdata = (age,)  #변수로 검색위해,
        if 사고일년도 >= 2019:
          query = db.execute("SELECT 2019년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2018:
          query = db.execute("SELECT 2018년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2017:
          query = db.execute("SELECT 2017년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2016:
          query = db.execute("SELECT 2016년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2015:
          query = db.execute("SELECT 2015년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2014:
          query = db.execute("SELECT 2014년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2013:
          query = db.execute("SELECT 2013년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2012:
          query = db.execute("SELECT 2012년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2011:
          query = db.execute("SELECT 2011년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2010:
          query = db.execute("SELECT 2010년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2009:
          query = db.execute("SELECT 2009년 from life_male where age=%s", setdata)
        life_male = db.fetchone()
        life_male = float(life_male[0])  # 튜플을 float으로 변환
        life_male_age = life_male
        print('남자여명기간 타입:', type(life_male)) #float
        print('남자여명기간 :', life_male) #23.28


        #여자 여명기간 구하기
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        db = conn.cursor()
        setdata = (age,)  #변수로 검색위해,
        if 사고일년도 >= 2019:
          query = db.execute("SELECT 2019년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2018:
          query = db.execute("SELECT 2018년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2017:
          query = db.execute("SELECT 2017년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2016:
          query = db.execute("SELECT 2016년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2015:
          query = db.execute("SELECT 2015년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2014:
          query = db.execute("SELECT 2014년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2013:
          query = db.execute("SELECT 2013년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2012:
          query = db.execute("SELECT 2012년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2011:
          query = db.execute("SELECT 2011년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2010:
          query = db.execute("SELECT 2010년 from life_male where age=%s", setdata)
        elif 사고일년도 == 2009:
          query = db.execute("SELECT 2009년 from life_male where age=%s", setdata)
        life_female = db.fetchone()
        life_female = float(life_female[0])  # 튜플을 float으로 변환
        life_female_age = life_female
        print('여자여명기간 타입:', type(life_female)) #float
        print('여자여명기간 :', life_female) #23.28


        #기대여명 채팅창 출력용
        def 기대여명_print(sex):
          if sex == 1 :
            return life_male
          elif sex == 2 :
            return life_female
        print('기대여명_print',기대여명_print(sex))




        #sex에 따라 여명나이 자동 표시
        def life(sex):
          if sex==1:
            return float(life_male_age)
          else:
            return float(life_female_age)
        print('남여입력에 따른 여명나이',life(sex)) #82.11

        #life(sex)를 좀더 구분하기 쉽게 변수로 변경
        life_age= life(sex)
        print('남여입력(변수)에 따른 여명나이',life_age) #86.82



        print('==========여명종료일 구하기 ==========')

        #여명종료일
        여명종료일 = acc_date + timedelta(life_age * 365.2425) #accident day + life_age = 여명종료일
        print('여명종료일:',여명종료일) #2103-04-13 09:29:22.560000+00:00
        print('여명종료일 타입:',type(여명종료일)) #<class 'datetime.datetime'>

        #채팅창 출력용
        여명종료일_str = 여명종료일.strftime("%Y-%m-%d") #간병종료일을 str로 변환
        print('여명종료일_str',여명종료일_str) #2103-04-13
        print('여명종료일_str 타입:',type(여명종료일_str)) #str


        print('==========여명기간 호프만계수 구하기 ==========')
        #여명기간 = 여명종료일 - 사고일
        여명기간_month = (여명종료일 - acc_date) / (365.2425/12)
        여명기간_month = int(여명기간_month / timedelta(1)) #timedelta를 timedelta로 나누면 숫자로 변환됨.!!! int 씌우는 이유는 소숫점 없애서 호프만 조회하려고.
        print('여명기간_month:',여명기간_month)
        print('여명기간_month type:',type(여명기간_month))


        #sql nwehof.db 접속, 호프만계수#여명기간 총호프만
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        db = conn.cursor()
        setdata = (여명기간_month,)  #변수로 검색위해, 여명기간 호프만,
        query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
        data1 = db.fetchone()
        data1 = (data1[0])  # 튜플을 float으로 변환
        여명기간호프만 = data1
        print('여명기간 호프만 타입:', type(data1))
        print('여명기간 호프만:', data1)


        print('===============간병기간 조회====================')

        단순간병기간조회 = pd.date_range(acc_date, 간병종료일, freq='1M')
        print('단순간병기간조회:', 단순간병기간조회)

        series_기간조회 = pd.Series(range(len(단순간병기간조회)), index=단순간병기간조회)
        print(series_기간조회)  #아래와 같은 방식으로 조회됨.
        #2019-04-300
        #2019-08-311
        #Freq: 4M, dtype: int64

        sum1 = 0
        monthList = []
        append = monthList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        간병기간개월수_for = 단순간병기간조회.strftime('%d')  #for문 적용 위함.
        for i in 간병기간개월수_for:
            sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
            append(i)
        for_월별간병기간조회 = sum1
        print('for_월별간병기간조회:', sum1)
        print('monthList', monthList)



        print('=========3. 오늘까지 간병 개월수 구하기======')

        단순간병기간조회_오늘까지 = pd.date_range(acc_date, 오늘, freq='1M')  #
        print('단순간병기간조회:', 단순간병기간조회)

        단순간병기간개월수_오늘까지 = len(단순간병기간조회_오늘까지)
        print('단순간병기간개월수_오늘까지:', 단순간병기간개월수_오늘까지)


        series_기간조회_오늘까지 = pd.Series(range(len(단순간병기간조회_오늘까지)), index=단순간병기간조회_오늘까지)
        print('series_기간조회_오늘까지',series_기간조회_오늘까지)  #아래와 같은 방식으로 조회됨.



        sum1 = 0
        monthList = []
        append = monthList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        간병기간개월수_for_오늘까지 = 단순간병기간조회_오늘까지.strftime('%d')  #for문 적용 위함.
        for i in 간병기간개월수_for_오늘까지:
            sum1 += int(i)  #정해진 기간의 월말 일수 모두 더하기
            append(i)
        for_월별간병기간조회_오늘까지 = sum1
        print('for_월별간병기간조회_오늘까지:', sum1)
        print('monthList', monthList)


        print('=========4.for문으로 오늘까지 호프만계수 구하기============')
        #저 위에서 다 정리하고 여기에 개월수 넣기.

        hofList = []  #호프만 계수
        append = hofList.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        db = conn.cursor()
        for o in range(1, 단순간병기간개월수_오늘까지+ 1):
          setdata = (o, )  #변수로 검색위해
          query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
          hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
          hoffman = float(hoffman[0])  # 튜플을 float으로 변환
          append(hoffman)
          hoffman = min(hoffman, 240)
        print('hofList:', hofList)  #hoffman 계수 구해서 리스트에 담기


        hof_m_List = []  #공제위한 계수 조회
        append = hof_m_List.append  #아래 for문에서 조회된 월별기간 30,29,31 을 myList에 담기
        for k in range(0, 단순간병기간개월수_오늘까지):
          setdata = (k, )  #변수로 검색위해
          query = db.execute("SELECT hoffman from hoff where year=%s", setdata)
          hoffman = db.fetchone()  #해당데이터 하나만 가져올때 one, fetchall은 모두
          hoffman = float(hoffman[0])  # 튜플을 float으로 변환
          append(hoffman)
          hoffman = min(hoffman, 240)
        print('hof_m_List:', hof_m_List)  #hoffman 계수 구해서 리스트에 담기

        print('==========================5.도시일용=======================')

        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        #오늘기준 도시일용노임
        setdata = (오늘_str, )  #변수로 검색위해, 사고일.
        setdata = (setdata[0])  # 튜플을 str로 변환
        db = conn.cursor()
        query = db.execute("SELECT dosi_day from dosi where date=%s", [setdata])
        data3 = db.fetchone()
        dosi_today = (data3[0])  # 튜플을 변환
        dosi_today_p = format(dosi_today, ",")
        print('오늘기준도시일용노임:', dosi_today)  #int, 3042000

        conn = pymysql.connect(host='aj4370.mysql.pythonanywhere-services.com',user='aj4370',password='growupmylife!',db='aj4370$hof',charset='utf8')  #sql db 접속
        #사고일기준 도시일용노임
        setdata = (acc_date, )  #변수로 검색위해, 사고일.
        setdata = (setdata[0])  # 튜플을 str로 변환
        db = conn.cursor()
        query = db.execute("SELECT dosi_day from dosi where date=%s", [setdata])
        data3 = db.fetchone()
        dosi_acc = (data3[0])  # 튜플을 변환
        dosi_acc_p = format(dosi_acc, ",")
        print('사고일기준도시일용노임:', dosi_acc)  #int, 3042000


        incomeList = []
        append = incomeList.append
        for x in series_기간조회_오늘까지:
            간병기준 = (series_기간조회_오늘까지.index[x]).strftime('%Y-%m-%d')
            print('간병기준', 간병기준)
            ##오늘보다 간병기준 날짜가 크면 도시일용노임을 오늘기준으로
            setdata = (간병기준, )  #변수로 검색위해, 사고일.
            setdata = (setdata[0])  # 튜플을 str로 변환
            query = db.execute("SELECT dosi_day from dosi where date=%s", [setdata])

            if 간병기준 > 오늘_str:
                data = (dosi_today, )
            else:
                data = db.fetchone()

            dosi = (data[0])  # 튜플을 변환

            append(dosi)  #도시일용노임 리스트에 담기
        print('incomeList:', incomeList)


        #해당월의 일수와 도시일용일당 곱하기
        dosi_calc = []
        a1 = list(map(int,monthList))# str list->int list
        a2 = incomeList

        for w in range(len(a1)):
            dosi_calc.append(a1[w] * a2[w])
        print(dosi_calc)



        print('==================6.오늘까지 List calc=================')

        #호프만끼리 공제
        hoffman_calc = []
        a1 = hofList
        a2 = hof_m_List

        for w in range(len(a1)):
            hoffman_calc.append(a1[w] - a2[w])
        print(hoffman_calc)
        hoffman_today합계 = sum(hoffman_calc)  #오늘위해 수정
        print('hoffman_calc합계:', hoffman_today합계)

        #hoffman과 dosi 곱하기,
        간병비_오늘까지 = []
        b1 = hoffman_calc
        b2 = dosi_calc
        for i in range(len(b1)):
            간병비_오늘까지.append(b1[i] * b2[i])
        print('간병비_오늘까지', 간병비_오늘까지)

        print('===============7.사고일~오늘까지 간병합계===================')
        #ilsil 안의 값 모두 더하기. 그러면 일실수입 합계 구해짐
        간병비_오늘까지합계 = sum(간병비_오늘까지) * numb4
        print('간병비_오늘까지합계:', 간병비_오늘까지합계)

        print('==================8.오늘이후~간병종료까지 간병합계===============')
        오늘이후Hoffman = min(240-hoffman_today합계, 한시간병호프만 - hoffman_today합계)
        간병비합계_오늘이후 = (dosi_today * 오늘해당_말일) * 오늘이후Hoffman  * numb4
        print('오늘이후Hoffman:', 오늘이후Hoffman)
        print('간병비합계_오늘이후:', 간병비합계_오늘이후)

        print('================9.간병비 총합계====================')
        간병비총합계 = 간병비_오늘까지합계 + 간병비합계_오늘이후
        간병비총합계 = format(round(간병비총합계),",")
        print('간병비총합계', 간병비총합계)
        print('간병기간 총호프만계수:', 오늘이후Hoffman + hoffman_today합계)



        fulfillmentText = '\n==========================\n📜위손사_BOT ver 1.0 \n==========================\n📜기초정보 및 보상금 평가근거\n========================== \n\n 1.날짜 및 나이 정보\n -사고당시 나이 : 만' + str(age) + '세 \n\n-사고일자 : ' + str(acc_date) + '\n\n -생년월일 : ' + str(birth) + '\n\n -간병기간 :'+str(numb3)+'년 \n -간병종료일 :' +str(간병종료일_str)+ '\n\n -기대여명 :'+str(기대여명_print(sex))+' 년 \n -기대여명 종료일 :'+str(여명종료일_str)+'\n\n -2.성별\n '+str(sex_p())+' \n\n 3.간병비 정보 \n -사고당시 1일간병비 기준 : ' + str(dosi_acc_p) + '원 \n -현재 간병비기준 : ' + str(dosi_today_p) + '원 \n -각 기간별 변동 간병비 적용.\n\n 4.중간이자공제 정보\n -간병기간호프만계수 :'+str(한시간병호프만)+'\n -여명기간호프만 :'+str(여명기간호프만)+'\n -중간이자 공제는 호프만계수를 적용합니다. \n\n 5.과실비율 \n -나의 과실비율 :' + str(numb2) + '% \n\n -6.간병인원: \n'+str(numb4)+'명 \n\n -간병비의 산정시 월별 도시일용노임은 사고당시 일일도시일용노임부터 현재까지 일일도시일용노임에 각 월별 해당일수(30,31,28 등)를 적용하여 계산되었으므로 참고하시기 바랍니다. \n\n\n==========================\n📜예상 간병비 \n========================== \n\n 간병비 :'+str(간병비총합계)+'\n\n==========end=============\n\n\n 제일 처음으로 돌아가려면 채팅창에 "홈" 입력 또는 좌측하단 홈버튼 클릭'



        #######################################
        ##########################################
        ################################################

    elif query_result.get('action') == 'period_calc':  # 기간계산
        date1 = query_result.get('parameters').get('date')  #
        date2 = query_result.get('parameters').get('date1') #


        # datetime로 변환.
        start_date = maya.parse(date1).datetime()
        print('start_date :', start_date)
        # #날짜만 구하기(시분초 제외)
        # acc_date = datetime.date(accident_date)
        # print('사고일 날짜만추출:', acc_date)


        # datetime로 변환.
        last_date = maya.parse(date2).datetime()
        print('last_date :', last_date)


        days = ((last_date - start_date) // timedelta(days=1))+1
        print('일수구하기:', days)  #1000 int , 오늘적용위해 수정.





        fulfillmentText = '시작일부터 종료일까지 기간은'+str(days)+'일 입니다.'


        #######################################
        ##########################################
        ################################################

    elif query_result.get('action') == 'date_calc':  #날짜계산
        date1 = query_result.get('parameters').get('date')  #
        numb1 = query_result.get('parameters').get('number') #


        # datetime로 변환.
        start_date = maya.parse(date1).datetime()
        print('start_date :', start_date)
        #날짜만 구하기(시분초 제외)
        start_date = datetime.date(start_date)
        print('start_date 날짜만추출:', start_date)


        #date
        date_calc = start_date + pd.DateOffset(days=numb1-1)




        fulfillmentText = '시작일부터' +str(numb1)+'일째 되는 날은 '+str(date_calc)+' 입니다.'


        #######################################
        ##########################################
        ################################################


    elif query_result.get('action') == 'retirement_death':  #retirement
        date = query_result.get('parameters').get('date')  #
        date1 = query_result.get('parameters').get('date1')  #
        date2 = query_result.get('parameters').get('date2')  #
        #numb = query_result.get('parameters').get('number') #
        numb1 = query_result.get('parameters').get('number1') #
        numb2 = query_result.get('parameters').get('number2') #
        numb3 = query_result.get('parameters').get('number3') #
        numb4 = query_result.get('parameters').get('number4') #


        birth = date
        입사일 = date1
        acc_date  = date2
        정년 = numb1
        월평균급여 = numb2
        월평균급여_p = format(round(numb2),',')
        내과실 = numb3
        기수령퇴직금 = numb4
        기수령퇴직금_p = format(round(numb4),',')


        # datetime로 변환.
        birth = maya.parse(date).datetime()
        입사일 = maya.parse(date1).datetime()
        acc_date = maya.parse(date2).datetime()
        print('birth, 입사일, acc_date:',birth, 입사일, acc_date)

        #날짜만 구하기(시분초 제외)
        birth = datetime.date(birth)
        입사일 = datetime.date(입사일)
        acc_date = datetime.date(acc_date)
        print('birth, 입사일, acc_date:',birth, 입사일, acc_date)

        print('===============정년====================')

        #정년 종료일(60세 기준),
        정년일 = datetime.date(birth + pd.DateOffset(years=numb1))
        print('정년 종료일:', 정년일)  #2020-01-01


        print('===============사고당시 만나이====================')

        #사고당시 만나이 구하기(사고일-생년월일),  사고시점의 나이
        age = (acc_date - birth) // timedelta(days=365)  #나이로 계산 int. 출력용
        age_month = (acc_date - birth) // timedelta(365 / 12)  #사고당시 나이에 해당하는 총 일수를 월로 변환. 700개월 등
        print('age_month :', age_month)  #700개월 등, int
        print('사고일-생년월일 :', acc_date - birth)  #2020-01-01
        print('사고당시 만 나이:', age)  # 15, int



        print('========입사~정년까지 근속연수==========')
        r = relativedelta.relativedelta(정년일, 입사일)
        총근속연수 = r.years
        자투리총근속월수 = r.months
        자투리총근속일수 = r.days
        print(r.years, 'years,', r.months,'months and', r.days, 'days')

        입사_정년총근속연수 = 총근속연수 + 자투리총근속월수/12 + 자투리총근속일수/365
        print('입사_정년총근속연수:',입사_정년총근속연수)

        print('========정년시 퇴직금==========')

        정년시퇴직금 = 월평균급여 * 입사_정년총근속연수
        print('정년시퇴직금:',정년시퇴직금)

        현가 = (1/(1+0.05*입사_정년총근속연수))
        print('현가:',현가)

        현가후정년퇴직금 = 정년시퇴직금 * 현가
        print('현가후정년퇴직금:',현가후정년퇴직금)


        print('========사망~정년까지 근속연수==========')

        k = relativedelta.relativedelta(정년일, acc_date)
        사고후근속연수 = k.years
        자투리_사고후근속월수 = k.months
        자투리_사고후근속일수 = k.days
        print(k.years, 'years,', k.months,'months and', k.days, 'days')

        사고후정년까지근속년수 = 사고후근속연수 + 자투리_사고후근속월수/12 + 자투리_사고후근속일수/365
        print('사고후정년까지근속년수:',사고후정년까지근속년수)

        사고후현가 = (1/(1+0.05*사고후정년까지근속년수))
        print('사고후현가:',사고후현가)



        print('==========일실퇴직금==========')
        #과실적용
        과실적용 = 1 - (내과실 * 0.01)


        일실퇴직금 = (정년시퇴직금 * 사고후현가 - 기수령퇴직금) * 과실적용
        print('일실퇴직금:',일실퇴직금)

        일실퇴직금_p = format(round(일실퇴직금),',')
        print('일실퇴직금_p:',일실퇴직금_p)




        fulfillmentText = '\n==========================\n📜위손사_BOT ver 1.0 \n==========================\n📜기초정보 및 보상금 평가근거\n========================== \n\n 1.날짜 및 나이 정보\n -사고당시 나이 : 만' + str(age) + '세 \n\n-사고일자 : ' + str(acc_date) + ' \n\n -입사일 :'+str(입사일)+'\n\n -생년월일 : ' + str(birth) + '\n\n -정년종료일 :'+str(정년일)+' \n\n\n 2.기타정보 \n\n -내과실 '+str(numb3)+'% \n\n -기수령퇴직금 :'+str(기수령퇴직금_p)+'\n\n -월평균급여 :'+str(월평균급여_p)+'\n\n==========================\n📜일실퇴직금\n========================== \n\n 귀하의 일실퇴직금은 '+str(일실퇴직금_p)+'원 입니다.\n\n\n '






    elif query_result.get('action') == 'retirement_LCL':  #retirement
        date = query_result.get('parameters').get('date')  #
        date1 = query_result.get('parameters').get('date1')  #
        date2 = query_result.get('parameters').get('date2')  #
        numb = query_result.get('parameters').get('number') #
        numb1 = query_result.get('parameters').get('number1') #
        numb2 = query_result.get('parameters').get('number2') #
        numb3 = query_result.get('parameters').get('number3') #
        numb4 = query_result.get('parameters').get('number4') #


        birth = date
        입사일 = date1
        acc_date  = date2
        장해율 = numb * 0.01
        정년 = numb1
        월평균급여 = numb2
        월평균급여_p = format(round(numb2),',')
        내과실 = numb3
        기수령퇴직금 = numb4
        기수령퇴직금_p = format(round(numb4),',')


        # datetime로 변환.
        birth = maya.parse(date).datetime()
        입사일 = maya.parse(date1).datetime()
        acc_date = maya.parse(date2).datetime()
        print('birth, 입사일, acc_date:',birth, 입사일, acc_date)

        #날짜만 구하기(시분초 제외)
        birth = datetime.date(birth)
        입사일 = datetime.date(입사일)
        acc_date = datetime.date(acc_date)
        print('birth, 입사일, acc_date:',birth, 입사일, acc_date)

        print('===============정년====================')

        #정년 종료일(60세 기준),
        정년일 = datetime.date(birth + pd.DateOffset(years=numb1))
        print('정년 종료일:', 정년일)  #2020-01-01


        print('===============사고당시 만나이====================')

        #사고당시 만나이 구하기(사고일-생년월일),  사고시점의 나이
        age = (acc_date - birth) // timedelta(days=365)  #나이로 계산 int. 출력용
        age_month = (acc_date - birth) // timedelta(365 / 12)  #사고당시 나이에 해당하는 총 일수를 월로 변환. 700개월 등
        print('age_month :', age_month)  #700개월 등, int
        print('사고일-생년월일 :', acc_date - birth)  #2020-01-01
        print('사고당시 만 나이:', age)  # 15, int



        print('========입사~정년까지 근속연수==========')
        r = relativedelta.relativedelta(정년일, 입사일)
        총근속연수 = r.years
        자투리총근속월수 = r.months
        자투리총근속일수 = r.days
        print(r.years, 'years,', r.months,'months and', r.days, 'days')

        입사_정년총근속연수 = 총근속연수 + 자투리총근속월수/12 + 자투리총근속일수/365
        print('입사_정년총근속연수:',입사_정년총근속연수)

        print('========정년시 퇴직금==========')

        정년시퇴직금 = 월평균급여 * 입사_정년총근속연수
        print('정년시퇴직금:',정년시퇴직금)

        현가 = (1/(1+0.05*입사_정년총근속연수))
        print('현가:',현가)

        현가후정년퇴직금 = 정년시퇴직금 * 현가
        print('현가후정년퇴직금:',현가후정년퇴직금)


        print('========사망~정년까지 근속연수==========')

        k = relativedelta.relativedelta(정년일, acc_date)
        사고후근속연수 = k.years
        자투리_사고후근속월수 = k.months
        자투리_사고후근속일수 = k.days
        print(k.years, 'years,', k.months,'months and', k.days, 'days')

        사고후정년까지근속년수 = 사고후근속연수 + 자투리_사고후근속월수/12 + 자투리_사고후근속일수/365
        print('사고후정년까지근속년수:',사고후정년까지근속년수)

        사고후현가 = (1/(1+0.05*사고후정년까지근속년수))
        print('사고후현가:',사고후현가)



        print('==========일실퇴직금==========')
        #과실적용
        과실적용 = 1 - (내과실 * 0.01)


        일실퇴직금 = (정년시퇴직금 * 사고후현가 - 기수령퇴직금) * 장해율 * 과실적용
        print('일실퇴직금:',일실퇴직금)

        일실퇴직금_p = format(round(일실퇴직금),',')
        print('일실퇴직금_p:',일실퇴직금_p)





        fulfillmentText = '\n==========================\n📜위손사_BOT ver 1.0 \n==========================\n📜기초정보 및 보상금 평가근거\n========================== \n\n 1.날짜 및 나이 정보\n -사고당시 나이 : 만' + str(age) + '세 \n\n-사고일자 : ' + str(acc_date) + ' \n\n -입사일 :'+str(입사일)+'\n\n -생년월일 : ' + str(birth) + '\n\n -정년종료일 :'+str(정년일)+' \n\n\n 2.기타정보 \n\n -내과실 '+str(numb3)+'% \n\n -기수령퇴직금 :'+str(기수령퇴직금_p)+'\n\n -월평균급여 :'+str(월평균급여_p)+'\n\n -장해율 :'+str(numb)+'%\n\n==========================\n📜일실퇴직금\n========================== \n\n 귀하의 일실퇴직금은 '+str(일실퇴직금_p)+'원 입니다.\n\n\n '






        #######################################
        ##########################################
        ################################################

    elif query_result.get('action') == 'test':  #test
        text = query_result.get('parameters').get('code')  #


        print(text)


        if text =='족관절골절':
            LCL = 14
        elif text =='손목골절':
            LCL = 10



        print(LCL)



        fulfillmentText = 'LCL is '+str(LCL)+'% 입니다.'

        ##########################################
        ################################################

        #######################################
        ##########################################


#=====================================last=================================================

    return {
        "fulfillmentText": fulfillmentText,
        "displayText": '50',
        "source": "webhookdata"
    }


#==============for keep going 2023======================

def print_every_n_seconds(n=10):
    while True:
        print(time.ctime())
        time.sleep(n)

thread = threading.Thread(target=print_every_n_seconds)
thread.start()
#====================================






if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0',port=8080)
    #app.run()
